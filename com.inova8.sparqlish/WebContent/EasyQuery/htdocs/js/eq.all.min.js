var JSON = JSON || {};
JSON.stringify = JSON.stringify || function(e) {
    var d = typeof(e);
    if (d != "object" || e === null) {
        if (d == "string") {
            e = '"' + e + '"'
        }
        return String(e)
    } else {
        var f, b, c = [],
            a = (e && e.constructor == Array);
        for (f in e) {
            b = e[f];
            d = typeof(b);
            if (d == "string") {
                b = '"' + b + '"'
            } else {
                if (d == "object" && b !== null) {
                    b = JSON.stringify(b)
                }
            }
            c.push((a ? "" : '"' + f + '":') + String(b))
        }
        return (a ? "[" : "{") + String(c) + (a ? "]" : "}")
    }
};
JSON.parse = JSON.parse || function(str) {
    if (str === "") {
        str = '""'
    }
    eval("var p=" + str + ";");
    return p
};
(function(d, c) {
    var b = c.EQ = c.EQ || {};
    var a = {
        Locale: "en",
        AltMenuAttribute: "Attribute",
        AltMenuConstantExpression: "Constant expression",
        ButtonApply: "Apply",
        ButtonCancel: "Cancel",
        ButtonOK: "OK",
        ButtonEnable: "Toggle enable",
        ButtonDelete: "Delete",
        ButtonAddCondition: "Add condition",
        ButtonAddPredicate: "Add group of conditions",
        CmdAddConditionAfter: "Add a new condition after the current row",
        CmdAddConditionInto: "Add a new condition",
        CmdAddPredicateAfter: "Open a bracket after the current row",
        CmdAddPredicateInto: "Open a bracket",
        CmdClickToAddCondition: "[Add new condition]",
        CmdDeleteRow: "Delete this row",
        ErrIncorrectPredicateTitleFormat: "Incorrect predicate title format",
        ErrNotNumber: " is not a number",
        ErrIncorrectInteger: "Incorrect integer value",
        ErrIncorrectNumberList: "Incorrect list format",
        False: "False",
        FirstDayOfMonth: "First day of the month",
        FirstDayOfYear: "First day of the year",
        HourStart: "This hour start",
        LinkTypeAll: "all",
        LinkTypeAny: "any",
        LinkTypeNone: "none",
        LinkTypeNotAll: "not all",
        ConjAll: "and",
        ConjAny: "or",
        ConjNotAll: "",
        ConjNone: "",
        Midnight: "Midnight",
        MsgApplySelection: "[Apply selection]",
        MsgAs: "as",
        MsgEmptyList: "(empty list)",
        MsgEmptyListValue: "[select value]",
        MsgEmptyScalarValue: "[enter value]",
        MsgSubQueryValue: "[edit sub-query]",
        MsgOf: "of",
        Noon: "Noon",
        Now: "Now",
        PredicateTitle: "{lt} of the following apply",
        RootPredicateTitle: "Select records where {lt} of the following apply",
        StrAddConditions: "Add conditions",
        SubQueryDialogTitle: "Edit sub-query",
        SubQueryColumnTitle: "Column:",
        SubQueryEmptyColumn: "[select column]",
        SubQueryQueryPanelCaption: "Conditions",
        Today: "Today",
        Tomorrow: "Tomorrow",
        True: "True",
        Yesterday: "Yesterday",
        ButtonSorting: "Sorting",
        ButtonToAggr: "Change to aggregate column",
        ButtonToSimple: "Change to simple column",
        CmdAscending: "Ascending",
        CmdClickToAddColumn: "[Add new column]",
        CmdDeleteColumn: "Delete column",
        CmdDeleteSorting: "Delete sorting",
        CmdDescending: "Descending",
        CmdGroupSort: "Sorting",
        CmdNotSorted: "Not sorted",
        ColTypeAggrFunc: "Aggregate function",
        ColTypeCompound: "Calculated",
        ColTypeGroup: "Column type",
        ColTypeSimple: "Simple column",
        HeaderExpression: "Expression",
        HeaderSorting: "Sorting",
        HeaderTitle: "Title",
        SortHeaderColumn: "Column",
        SortHeaderSorting: "Sorting",
        StrAddColumns: "Add columns",
        CmdMoveToStart: "Move to start",
        CmdMoveRight: "Move right",
        CmdMoveLeft: "Move left",
        CmdMoveToEnd: "Move to the end",
        ButtonMenu: "Show menu",
        CmdToSimple: "Not aggregated"
    };
    b.core = {
        texts: {
            Entities: {},
            Attributes: {},
            Operators: {}
        },
        constLists: {
            SpecDateValues: [{
                id: "${Today}",
                key: "Today",
                isDefault: true
            }, {
                id: "${Yesterday}",
                key: "Yesterday"
            }, {
                id: "${Tomorrow}",
                key: "Tomorrow"
            }, {
                id: "${FirstDayOfMonth}",
                key: "FirstDayOfMonth"
            }, {
                id: "${FirstDayOfYear}",
                key: "FirstDayOfYear"
            }],
            SpecTimeValues: [{
                id: "${Now}",
                key: "Now",
                isDefault: true
            }, {
                id: "${HourStart}",
                key: "HourStart"
            }, {
                id: "${Midnight}",
                key: "Midnight"
            }, {
                id: "${Noon}",
                key: "Noon"
            }],
            BooleanValues: [{
                id: "${false}",
                key: "False"
            }, {
                id: "${true}",
                key: "True",
                isDefault: true
            }]
        },
        predicateLinkTypeList: [{
            id: "All",
            key: "LinkTypeAll"
        }, {
            id: "Any",
            key: "LinkTypeAny"
        }, {
            id: "None",
            key: "LinkTypeNone"
        }, {
            id: "NotAll",
            key: "LinkTypeNotAll"
        }],
        _numericTypes: ["Byte", "Word", "Int", "Int32", "Int64", "Float", "Currency"],
        _intTypes: ["Byte", "Word", "Int", "Int32", "Int64"],
        getText: function() {
            var h = b.core.texts;
            var g = "";
            if (arguments) {
                var f = false;
                var j = arguments.length;
                var e;
                for (e = 0; e < j; e++) {
                    g = h[arguments[e]];
                    if (!g) {
                        f = true;
                        break
                    }
                }
                if (f) {
                    h = a;
                    for (e = 0; e < j; e++) {
                        g = h[arguments[e]];
                        if (!g) {
                            break
                        }
                    }
                }
            }
            return g
        },
        getShiftToFitWindow: function(g, i) {
            var f = d(c).width();
            var h = g + i;
            var e = 0;
            if (h > f) {
                e = f - h - 10;
                if (g + e < 0) {
                    e = 10 - g
                }
            }
            return e
        },
        isNumericType: function(f) {
            var e = d.inArray(f, this._numericTypes);
            return (e >= 0)
        },
        isIntType: function(f) {
            var e = d.inArray(f, this._intTypes);
            return (e >= 0)
        },
        isNumeric: function(e) {
            return d.isNumeric(e)
        },
        combinePath: function(g, f) {
            var e = g;
            if (e != null && e.length > 0) {
                if (e.charAt(e.length - 1) != "/") {
                    e += "/"
                }
                e += f
            } else {
                e = f
            }
            return e
        },
        moveArrayItem: function(f, h, e) {
            if (e >= f.length) {
                var g = e - f.length;
                while ((g--) + 1) {
                    f.push(undefined)
                }
            }
            f.splice(e, 0, f.splice(h, 1)[0])
        },
        queryChanged: function(f, e) {
            b.client.queryChanged(f, e)
        },
        getEmptyQueryObject: function() {
            var e = {
                root: {
                    linkType: "All",
                    enabled: true,
                    conditions: []
                },
                columns: [],
                justsorted: []
            };
            return e
        }
    };
    b.core.DataModel = function(e) {
        if (e) {
            this.setObject(e)
        } else {
            this.setObject({
                aggrFunctions: [],
                operators: [],
                rootEntity: {}
            })
        }
    };
    b.core.DataModel.prototype = {
        nullAttribute: {
            id: "",
            caption: "{Unrecognized attribute}",
            dataType: "String",
            description: "",
            size: 0,
            operators: [],
            UIC: false,
            UIR: false,
            UIS: false
        },
        nullOperator: {
            id: "",
            caption: "{Unrecognized operator}",
            displayFormat: "{expr1} [[{unrecognized operator}]] {expr2}",
            exprType: "Unknown",
            paramCount: 2,
            valueKind: "Scalar"
        },
        getObject: function() {
            return this.model
        },
        setObject: function(e) {
            if (e) {
                if (typeof e === "string") {
                    this.model = JSON.parse(e)
                } else {
                    this.model = e
                }
            }
        },
        isEmpty: function() {
            return this.model == null
        },
        getRootEntity: function() {
            return this.model ? this.model.rootEntity : {}
        },
        getAttributeById: function(f) {
            var e = this.getEntityAttrById(this.getRootEntity(), f);
            if (!e) {
                e = this.nullAttribute
            }
            return e
        },
        checkAttrProperty: function(g, f) {
            var e = (typeof g === "object") ? g : this.getAttributeById(g);
            if (e) {
                if (e[f]) {
                    return true
                } else {
                    if (e.lookupAttr) {
                        g = e.lookupAttr;
                        e = this.getAttributeById(g);
                        return e && e[f]
                    }
                }
            } else {
                return false
            }
        },
        getEntityAttrById: function(f, h) {
            var e;
            if (f.attributes) {
                var g = f.attributes.length;
                for (e = 0; e < g; e++) {
                    if (f.attributes[e].id == h) {
                        return f.attributes[e]
                    }
                }
            }
            if (f.subEntities) {
                var i = f.subEntities.length;
                for (e = 0; e < i; e++) {
                    res = this.getEntityAttrById(f.subEntities[e], h);
                    if (res) {
                        return res
                    }
                }
            }
            return null
        },
        getFullEntityPathByAttr: function(f, e) {
            e = e || " ";
            return this.getEntityPathByAttr(this.getRootEntity(), f, e)
        },
        getEntityPathByAttr: function(f, h, n) {
            if (!f) {
                return ""
            }
            n = n || " ";
            var l = "";
            if (f.caption) {
                var i = b.core.getText("Entities", f.caption);
                l = i ? i : f.caption
            }
            var m;
            if (f.attributes) {
                var e = f.attributes.length;
                for (m = 0; m < e; m++) {
                    if (f.attributes[m].id == h) {
                        return l
                    }
                }
            }
            if (f.subEntities) {
                var g = f.subEntities.length;
                for (m = 0; m < g; m++) {
                    var k = f.subEntities[m];
                    var j = this.getEntityPathByAttr(k, h, n);
                    if (j !== "") {
                        if (l !== "") {
                            j = l + n + j
                        }
                        return j
                    }
                }
            }
            return ""
        },
        getAttributeText: function(f, g) {
            var i = b.core.getText("Attributes", f.id);
            if (!i) {
                i = f.caption
            }
            if (!g) {
                return i
            }
            var e = g.replace(new RegExp("{attr}", "g"), i);
            var h = this.getFullEntityPathByAttr(f.id, ".");
            e = e.replace(new RegExp("{entity}", "g"), h);
            return e
        },
        _listByEntity: function(i, e) {
            var e = e || {};
            var o = [];
            var n;
            var m = null;
            if (i.subEntities) {
                var j = i.subEntities.length;
                for (var f = 0; f < j; f++) {
                    m = i.subEntities[f];
                    if (e.addUIC !== false && m.UIC !== false || e.addUIR !== false && m.UIR !== false || e.addUIS !== false && m.UIS !== false) {
                        n = b.core.getText("Entities", m.name);
                        if (!n) {
                            n = m.caption
                        }
                        var l = {
                            id: m.name,
                            text: n,
                            items: []
                        };
                        l.items = this._listByEntity(m, e);
                        o.push(l)
                    }
                }
            }
            var k = null;
            if (i.attributes) {
                var h = i.attributes.length;
                for (var g = 0; g < h; g++) {
                    k = i.attributes[g];
                    if (e.addUIC !== false && k.UIC !== false || e.addUIR !== false && k.UIR !== false || e.addUIS !== false && k.UIS !== false) {
                        n = b.core.getText("Attributes", k.id);
                        if (!n) {
                            n = k.caption
                        }
                        o.push({
                            id: k.id,
                            text: n
                        })
                    }
                }
            }
            return o
        },
        getEntitiesTree: function(e) {
            return this._listByEntity(this.getRootEntity(), e)
        },
        _findItemById: function(h, g) {
            var f = h.length;
            for (var e = 0; e < f; e++) {
                if (h[e].id === g) {
                    return h[e]
                }
            }
            return null
        },
        getFirstUICAttr: function() {
            return this.getFirstUICAttrInEntity(this.getRootEntity())
        },
        getFirstUICAttrInEntity: function(g) {
            if (g.UIC !== false) {
                var f = 0;
                if (g.attributes) {
                    var h = g.attributes.length;
                    for (f = 0; f < h; f++) {
                        if (g.attributes[f].UIC) {
                            return g.attributes[f]
                        }
                    }
                }
                if (g.subEntities) {
                    var i = g.subEntities.length;
                    for (f = 0; f < i; f++) {
                        var e = this.getFirstUICAttrInEntity(g.subEntities[f]);
                        if (e) {
                            return e
                        }
                    }
                }
            }
            return null
        },
        findOperatorById: function(f) {
            if (this.model.operators) {
                var g = this.model.operators.length;
                for (var e = 0; e < g; e++) {
                    if (this.model.operators[e].id == f) {
                        return this.model.operators[e]
                    }
                }
            }
            return null
        },
        getOperatorById: function(e) {
            var f = this.findOperatorById(e);
            if (!f) {
                f = this.nullOperator
            }
            return f
        },
        getDefaultOperatorIdForAttr: function(e) {
            if (e.defaultOperator) {
                return e.defaultOperator
            } else {
                if (e.operators.length > 0) {
                    return e.operators[0]
                } else {
                    return this.nullOperator.id
                }
            }
        },
        getDefaultOperatorForAttr: function(e) {
            operatorId = this.getDefaultOperatorIdForAttr(e);
            return this.getOperatorById(operatorId)
        },
        getDefaultOperand: function(f, g) {
            var e = {
                dataType: g.exprType,
                kind: g.valueKind
            };
            if (!e.dataType || e.dataType === "Unknown") {
                e.dataType = f.dataType
            }
            return e
        },
        getAggrFunctions: function() {
            return this.model ? this.model.aggrFunctions : []
        },
        getAggrFunctionCaption: function(g) {
            var e = b.core.getText("Aggr" + g.replace(" ", "") + "_Caption");
            if (e) {
                return e
            }
            var f = this._findItemById(this.model.aggrFunctions, g);
            if (!f || !f.caption) {
                return g
            }
            return f.caption
        },
        getAggrFunctionFormat: function(g) {
            var f = b.core.getText("Aggr" + g.replace(" ", "") + "_Format");
            if (f) {
                return f
            }
            var e = this._findItemById(this.model.aggrFunctions, g);
            if (!e || !e.displayFormat) {
                return ""
            }
            return e.displayFormat
        }
    };
    b.core.Query = function(f, g, e) {
        if (f) {
            this.model = f
        } else {
            this.model = new b.core.DataModel()
        }
        g = g || b.core.getEmptyQueryObject();
        this.setObject(g);
        this._listCache = {};
        e = e || {};
        this.attrClassName = e.attrClassName || "ENTATTR";
        this.listRequestUrl = e.listRequestUrl || "EasyQuery/GetList";
        this.clientListRequestHandler = e.clientListRequestHandler;
        this._queryChangedCallbacks = d.Callbacks("unique")
    };
    b.core.Query.prototype = {
        getObject: function() {
            return this.query
        },
        setObject: function(e) {
            if (e) {
                if (typeof e === "string") {
                    this.query = JSON.parse(e)
                } else {
                    this.query = e
                }
            }
        },
        getModel: function() {
            return this.model
        },
        setModel: function(e) {
            this.model = e;
            this.clear()
        },
        loadModelObject: function(e) {
            this.model.setObject(e)
        },
        toJSON: function() {
            return JSON.stringify(this.query)
        },
        isEmptyConditions: function() {
            return !this.query.root || !this.query.root.conditions || this.query.root.conditions.length === 0
        },
        isEmptyColumns: function() {
            return !this.query.root || !this.query.root.columns || this.query.root.columns.length === 0
        },
        clear: function() {
            this.clearColumns();
            this.clearConditions()
        },
        clearColumns: function() {
            this.query.columns = [];
            this.query.justsorted = []
        },
        clearConditions: function() {
            this.query.root = {
                linkType: "All",
                enabled: true,
                conditions: []
            }
        },
        getName: function() {
            return this.query ? this.query.name : ""
        },
        getColumns: function() {
            return this.query ? this.query.columns : []
        },
        addColumn: function(g, e) {
            if (!this.query) {
                return
            }
            var f = this.query.columns;
            if (typeof e == "number") {
                f.splice.apply(f, [e, 0].concat(g))
            } else {
                f.push.apply(f, [].concat(g))
            }
        },
        moveColumn: function(f, e) {
            b.core.moveArrayItem(this.getColumns(), f, e)
        },
        getRootPredicate: function() {
            return this.query.root
        },
        addSimpleCondition: function(k) {
            var f = k.predicate || this.getRootPredicate();
            var h = this.getModel();
            if (!h) {
                return null
            }
            var j = k.attr;
            var e = h.getAttributeById(j);
            if (!e) {
                return null
            }
            var g = k.operator;
            var l;
            if (!g) {
                l = h.getDefaultOperatorForAttr(e)
            } else {
                l = h.getOperatorById(g)
            } if (!l) {
                return null
            }
            var i = this._createSimpleConditionObject(e, l, k.value);
            f.conditions.push(i);
            this.fireChangedEvent({
                changeType: "condition.add",
                condition: i
            });
            return i
        },
        _createValueExpr: function(f, g, i, j) {
            var h = this.getModel();
            var k = h.getDefaultOperand(f, g);
            var e = {
                typeName: "CONST",
                dataType: k.dataType,
                kind: k.kind,
                value: j,
                text: j
            };
            return e
        },
        _createSimpleConditionObject: function(e, g, l) {
            var f = this;
            if (!e) {
                return null
            }
            if (!e.UIC) {
                return null
            }
            var j = {
                typeName: "SMPL",
                enabled: true,
                operatorID: g.id,
                expressions: [{
                    typeName: f.attrClassName,
                    id: e.id
                }]
            };
            if (l) {
                if (d.isArray(l)) {
                    var k = l.length;
                    for (var h = 0; h < k; h++) {
                        j.expressions.push(this._createValueExpr(e, g, h + 1, l))
                    }
                } else {
                    j.expressions.push(this._createValueExpr(e, g, 1, l))
                }
            }
            return j
        },
        _getListFromCache: function(f) {
            var e = f.listName == "SQL" ? "SQL_" + f.sql : f.listName;
            return this._listCache[e]
        },
        _addListToCache: function(g, f) {
            var e = g.listName == "SQL" ? "SQL_" + g.sql : g.listName;
            this._listCache[e] = f
        },
        getListRequestHandler: function() {
            var e = this;
            var f = function(k, i) {
                if (k == null) {
                    return
                }
                var j = e._getListFromCache(k);
                if (j && j.length > 0) {
                    i(j);
                    return
                }
                var h = k.listName;
                var l = false;
                if (e.clientListRequestHandler) {
                    l = e.clientListRequestHandler(k, i)
                }
                if (!l) {
                    var g = k;
                    d.ajax({
                        type: "POST",
                        url: e.listRequestUrl,
                        data: g,
                        dataType: "json",
                        success: function(m) {
                            e._addListToCache(k, m);
                            i(m)
                        },
                        error: function(m, o, n) {
                            i(null)
                        }
                    })
                }
            };
            return f
        },
        addChangedCallback: function(e) {
            if (!e) {
                return
            }
            this._queryChangedCallbacks.add(e)
        },
        removeChangedCallback: function(e) {
            if (!e) {
                return
            }
            this._queryChangedCallbacks.remove(e)
        },
        fireChangedEvent: function(e) {
            e = e || {};
            e.query = this;
            this._queryChangedCallbacks.fire(e)
        },
        runThroughConditions: function(e) {
            var f = function(g) {
                var h;
                for (h = 0; h < g.conditions.length; h++) {
                    var j = g.conditions[h];
                    if (j.conditions) {
                        f(j)
                    } else {
                        if (e) {
                            e(j)
                        }
                    }
                }
            };
            f(this.getRootPredicate())
        },
        getOneValueForAttr: function(f) {
            var e = null;
            this.runThroughConditions(function(g) {
                var h = g.expressions[0];
                if (h.id == f && g.operatorID == "Equal") {
                    e = g.expressions[1].value
                }
            });
            return e
        }
    }
})(jQuery, window);
(function(f, h) {
    function n() {
        var F = -1;
        if (navigator.appName == "Microsoft Internet Explorer") {
            var D = navigator.userAgent;
            var E = new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})");
            if (E.exec(D) != null) {
                F = parseFloat(RegExp.$1)
            }
        }
        return F
    }

    function k() {
        var E = 0;
        if (window.opera) {
            var D = window.opera.version();
            E = parseFloat(D)
        }
        return E
    }
    var e = navigator.userAgent;
    var A = navigator.appVersion.match(/MSIE/) != null;
    var a = n();
    var g = A && a >= 8;
    var t = A && !g;
    var j = e.match(/firefox/i) != null;
    var w = j && ((e.match(/firefox\/2./i) != null) || (e.match(/firefox\/1./i) != null));
    var m = j && !w;
    var y = navigator.appVersion.match(/WebKit/) != null;
    var b = navigator.appVersion.match(/Chrome/) != null;
    var C = window.opera != null;
    var B = k();
    var v = C && (B < 10);

    function i(E) {
        var D = 0;
        if (typeof(E) == "string" && E != null && E != "") {
            var F = E.indexOf("px");
            if (F >= 0) {
                D = parseInt(E.substring(0, F))
            } else {
                D = 1
            }
        }
        return D
    }

    function z(F) {
        var E = new Object();
        E.left = 0;
        E.top = 0;
        E.right = 0;
        E.bottom = 0;
        if (window.getComputedStyle) {
            var D = window.getComputedStyle(F, null);
            E.left = parseInt(D.borderLeftWidth.slice(0, -2));
            E.top = parseInt(D.borderTopWidth.slice(0, -2));
            E.right = parseInt(D.borderRightWidth.slice(0, -2));
            E.bottom = parseInt(D.borderBottomWidth.slice(0, -2))
        } else {
            E.left = i(F.style.borderLeftWidth);
            E.top = i(F.style.borderTopWidth);
            E.right = i(F.style.borderRightWidth);
            E.bottom = i(F.style.borderBottomWidth)
        }
        return E
    }

    function d() {
        var D = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;
        var E = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft;
        return {
            top: D,
            left: E
        }
    }

    function q(I) {
        var O = new Object();
        O.x = 0;
        O.y = 0;
        if (I !== null) {
            if (I.getBoundingClientRect) {
                var K = I.getBoundingClientRect();
                var L = document.body;
                var F = document.documentElement;
                var E = d().top;
                var G = d().left;
                var H = F.clientTop || L.clientTop || 0;
                var M = F.clientLeft || L.clientLeft || 0;
                O.x = Math.round(K.left + G - M);
                O.y = Math.round(K.top + E - H)
            } else {
                O.x = I.offsetLeft;
                O.y = I.offsetTop;
                var J = I.parentNode;
                var D = null;
                while (offsetParent != null) {
                    O.x += offsetParent.offsetLeft;
                    O.y += offsetParent.offsetTop;
                    var N = offsetParent.tagName.toLowerCase();
                    if ((t && N != "table") || ((m || b) && N == "td")) {
                        D = z(offsetParent);
                        O.x += D.left;
                        O.y += D.top
                    }
                    if (offsetParent != document.body && offsetParent != document.documentElement) {
                        O.x -= offsetParent.scrollLeft;
                        O.y -= offsetParent.scrollTop
                    }
                    if (!A && !v || g) {
                        while (offsetParent != J && J !== null) {
                            O.x -= J.scrollLeft;
                            O.y -= J.scrollTop;
                            if (w || y) {
                                D = z(J);
                                O.x += D.left;
                                O.y += D.top
                            }
                            J = J.parentNode
                        }
                    }
                    J = offsetParent.parentNode;
                    offsetParent = offsetParent.offsetParent
                }
            }
        }
        return O
    }

    function x(G, H, I, E) {
        var F = document.getElementById(G);
        var L = document.getElementById(H);
        var K = q(L);
        var J = new Object();
        J.x = 0;
        J.y = 0;
        if (F.style.position != "absolute") {
            var D = F.offsetParent;
            if (D != null) {
                J = q(D)
            }
        }
        F.style.left = (K.x - J.x + I) + "px";
        F.style.top = (K.y - J.y + E) + "px";
        F.style.display = "block";
        return true
    }

    function l(D) {
        var E = document.getElementById(D);
        if (E != null) {
            E.focus();
            return true
        } else {
            return false
        }
    }

    function u(D) {
        var E = document.getElementById(D);
        if (E != null) {
            E.style.display = "none"
        }
        return true
    }

    function c(E, D, F) {
        if (E.addEventListener) {
            E.addEventListener(D, F, false)
        } else {
            if (E.attachEvent) {
                E.attachEvent("on" + D, F)
            }
        }
    }

    function s() {
        var D = {};
        D.height = 0;
        D.width = 0;
        if (document.documentElement && document.documentElement.clientHeight) {
            D.width = document.documentElement.clientWidth;
            D.height = document.documentElement.clientHeight
        } else {
            if (typeof(window.innerHeight) == "number") {
                D.width = window.innerWidth;
                D.height = window.innerHeight
            } else {
                if (document.body && document.body.clientHeight) {
                    D.width = document.body.clientWidth;
                    D.height = document.body.clientHeight
                }
            }
        }
        return D
    }
    var r = null;
    o.prototype = {
        showAt: function(K, I, L) {
            if (!this.items) {
                return
            }
            this.initLevelDiv();
            var G, N;
            var O = this.items.length;
            for (G = 0; G < O; G++) {
                N = this.items[G];
                if (N.itemCheckbox) {
                    N.itemCheckbox.checked = N.selected
                }
            }
            this._renderItems();
            var J = this.levelDiv.style;
            J.left = K + "px";
            J.top = I + "px";
            J.display = "block";
            if (this.searchBox != null) {
                this.searchBox.focus();
                this.searchBox.value = ""
            }
            this.scrollDiv.style.width = "auto";
            this.scrollDiv.style.height = "auto";
            if (L) {
                I = this.adjustTopPos(I);
                J.top = I + "px"
            }
            var E = this.parentMenu.minItemWidth;
            if (E > 0 && this.scrollDiv.offsetWidth < E) {
                for (var G = 0; G < O; G++) {
                    this.items[G].itemDiv.style.width = E + "px"
                }
            }
            var F = this.parentMenu.maxItemWidth;
            if (F > 0 && this.scrollDiv.offsetWidth > F) {
                for (var G = 0; G < O; G++) {
                    this.items[G].itemDiv.style.width = F + "px";
                    this.items[G].itemDiv.style.overflowX = "hidden"
                }
            }
            var H = s();
            var M = H.height - (I - d().top) - 15;
            if (this.parentMenu.maxHeight > 0 && M > this.parentMenu.maxHeight) {
                M = this.parentMenu.maxHeight
            }
            if (this.applyItem != null && this.applyItem.itemDiv != null) {
                M -= this.applyItem.itemDiv.offsetHeight + 5
            }
            if (this.searchDiv != null) {
                M -= this.searchDiv.offsetHeight
            }
            if (this.levelDiv.offsetHeight > M) {
                var D = M;
                if (D < 50) {
                    D = 50
                }
                this.scrollDiv.style.height = D + "px"
            } else {
                this.scrollDiv.style.height = "auto"
            }
        },
        hide: function() {
            if (this.activeItem !== null) {
                if (typeof(this.activeItem.subLevel) != "undefined") {
                    this.activeItem.subLevel.hide()
                }
            }
            if (this.levelDiv) {
                var D = this.levelDiv.style;
                D.display = "none";
                if (this.initialized) {
                    document.body.removeChild(this.levelDiv);
                    this.initialized = false
                }
            }
        },
        adjustTopPos: function(G) {
            var E = s();
            var F = G;
            var D = G - d().top + this.levelDiv.offsetHeight;
            if (D > E.height - 5) {
                F -= D - E.height + 5;
                if (F < d().top) {
                    F = d().top + 10
                }
            }
            return F
        },
        initLevelDiv: function() {
            if (!this.initialized) {
                document.body.appendChild(this.levelDiv);
                f(this.levelDiv).addClass("eqjs-menu-levelDiv");
                this.initialized = true
            }
        },
        activateItem: function(G) {
            if (this.activeItem != null) {
                this.deactivateItem(this.activeItem)
            }
            this.activeItem = G;
            var H = G.itemDiv;
            f(H).addClass("active");
            if (this.parentMenu.options.useDefaultStyles) {
                var J = this.parentMenu.style.colors.bgON;
                var K = this.parentMenu.style.colors.fgON;
                var D = this.parentMenu.style.colors.bgOVER;
                var F = this.parentMenu.style.colors.fgOVER || "";
                var I = this.parentMenu.style.itemClass || "";
                var E = this.parentMenu.style.itemClassOver || "";
                if (E != "") {
                    H.style.backgroundColor = "";
                    H.style.color = ""
                } else {
                    H.style.backgroundColor = D;
                    H.style.color = F
                }
            }
            if (G.items) {
                this.showSubLevel(G)
            }
        },
        deactivateItem: function(D) {
            var E = D.itemDiv;
            f(E).removeClass("active");
            if (this.parentMenu.options.useDefaultStyles) {
                var G = this.parentMenu.style.colors.bgON;
                var H = this.parentMenu.style.colors.fgON;
                var F = this.parentMenu.style.itemClass || "";
                if (F != "") {
                    E.style.backgroundColor = "";
                    E.style.color = ""
                } else {
                    E.style.backgroundColor = G;
                    E.style.color = H
                }
            }
            if (D.subLevel) {
                D.subLevel.hide()
            }
            this.activeItem = null
        },
        submit: function(F) {
            if (F != null) {
                if (typeof(F.items) != "undefined") {} else {
                    this.parentMenu.hideMenu();
                    var H = [];
                    if (F == this.applyItem) {
                        var G;
                        var E = this.items.length;
                        for (var D = 0; D < E; D++) {
                            G = this.items[D];
                            G.selected = G.itemCheckbox.checked;
                            if (G.selected) {
                                H.push(G)
                            }
                        }
                    }
                    if (H.length == 0) {
                        H = null
                    }
                    this.parentMenu.submitMenu(F, H)
                }
            }
        },
        showSubLevel: function(G) {
            if (typeof(G.subLevel) == "undefined") {
                G.subLevel = new o(this.parentMenu, G.items, this.levelIndex + 1)
            }
            var H = q(G.itemDiv);
            var E = s();
            var D = E.width - H.x - G.itemDiv.offsetWidth;
            var F = H.x;
            H.x += G.itemDiv.offsetWidth - 2;
            H.y += 1;
            G.subLevel.showAt(H.x, H.y, true);
            if (D < G.subLevel.levelDiv.offsetWidth) {
                G.subLevel.levelDiv.style.left = (F - G.subLevel.levelDiv.offsetWidth + 1) + "px"
            }
        },
        refreshItems: function() {
            var D = this.items.length;
            for (var E = 0; E < D; E++) {
                var F = this.items[E];
                if (F.itemDiv) {
                    if (F.hidden) {
                        F.itemDiv.style.display = "none"
                    } else {
                        F.itemDiv.style.display = "block"
                    }
                }
                if (F.subLevel) {
                    F.subLevel.refreshItems()
                }
            }
        },
        renderContent: function() {
            if (!this.items) {
                return
            }
            var Q = this;
            var O = this.parentMenu.style.colors.bgON || "white";
            var I = this.parentMenu.style.colors.fgON || "black";
            var D = this.parentMenu.style.colors.bgOVER || "LightSteelBlue";
            var T = this.parentMenu.style.itemStyle.fontFamily || "";
            var G = this.parentMenu.style.itemStyle.fontSize || "14px";
            var P = this.parentMenu.options.multiselect;
            var K = document.createElement("div");
            if (this.parentMenu.options.useDefaultStyles) {
                K.style.backgroundColor = O;
                K.style.border = "1px solid";
                K.style.borderColor = this.parentMenu.style.colors.border;
                K.style.margin = "-2px 2px 2px -2px";
                K.style.width = "auto";
                K.style.height = "auto"
            }
            K.style.zIndex = this.parentMenu.zIndex;
            K.style.position = "absolute";
            K.style.display = "none";
            K.menuLevel = this;
            var F = this.parentMenu;
            var H = this.applyItem;
            if (P && this.levelIndex === 0) {
                var M = document.createElement("div"),
                    J = document.createElement("button");
                f(M).addClass("eqjs-menu-applyDiv");
                M.menuItem = H;
                if (this.parentMenu.options.useDefaultStyles) {
                    M.style.borderBottom = "1px solid";
                    M.style.padding = "5px";
                    M.style.marginBottom = "5px";
                    J.style.padding = "0 5px";
                    J.style.cursor = "pointer"
                }
                var U = document.createTextNode(this.parentMenu.options.buttons.submit);
                J.appendChild(U);
                M.appendChild(J);
                var R = document.createElement("button");
                f(R).addClass("eqjs-menu-cancel");
                if (this.parentMenu.options.useDefaultStyles) {
                    R.style.padding = "0 5px";
                    R.style.cursor = "pointer";
                    R.style.marginLeft = "15px"
                }
                var N = document.createTextNode(this.parentMenu.options.buttons.cancel);
                R.appendChild(N);
                M.appendChild(R);
                K.appendChild(M);
                H.itemDiv = M;
                f(J).click(function() {
                    Q.submit(Q.applyItem)
                });
                f(R).click(function() {
                    Q.parentMenu.hideMenu()
                })
            }
            if (Q.items.length >= F.options.showSearchBoxAfter) {
                var L = document.createElement("div");
                f(L).addClass("eqjs-menu-searchDiv");
                if (this.parentMenu.options.useDefaultStyles) {
                    L.style.borderBottom = "1px solid #666";
                    L.style.backgroundColor = O;
                    L.style.borderColor = this.parentMenu.style.colors.border;
                    if (T != "") {
                        L.style.fontFamily = T
                    }
                    L.style.fontSize = G;
                    L.style.color = I;
                    L.style.cursor = "pointer";
                    L.style.textAlign = "left";
                    L.style.padding = "5px"
                }
                var S = document.createElement("input");
                Q.searchBox = S;
                Q.searchDiv = L;
                S.type = "text";
                S.size = "16";
                if (this.parentMenu.options.useDefaultStyles) {
                    S.style.fontFamily = "monospace";
                    S.style.fontSize = "8pt";
                    S.style.width = "100%"
                }
                L.appendChild(S);
                K.appendChild(L);
                f(S).on("keyup", function() {
                    Q._renderItems(f(this).val())
                })
            }
            var E = document.createElement("div");
            f(E).addClass("eqjs-menu-scrollDiv");
            E.style.overflowX = "hidden";
            E.style.overflowY = "auto";
            E.style.position = "relative";
            K.appendChild(E);
            this.levelDiv = K;
            this.scrollDiv = E;
            this._renderItems()
        },
        _renderItems: function(L) {
            var Q = this;
            var E = this.scrollDiv;
            var M = this.parentMenu.options.multiselect;
            var U = this.parentMenu.options.activateOnMouseOver;
            var H = this.parentMenu.style.colors.fgON || "black";
            var D = this.parentMenu.style.colors.bgOVER || "LightSteelBlue";
            var F = this.parentMenu.style.itemStyle.fontSize || "14px";
            f(E).empty();
            var G = L ? new RegExp(L, "i") : null;
            var T;
            var V = this.items.length;
            for (T = 0; T < V; T++) {
                var W = this.items[T];
                if (!W || !W.text) {
                    continue
                }
                var P = G ? W.text.search(G) : 0;
                if (P < 0) {
                    continue
                }
                W.data = function(Y) {
                    return this[Y]
                };
                if (typeof(W.selected) == "undefined") {
                    W.selected = false
                }
                if (W.selected && this.selectedItem == null) {
                    this.selectedItem = W
                }
                var J = document.createElement("div");
                f(J).addClass("eqjs-menu-itemDiv");
                E.appendChild(J);
                J.menuItem = W;
                W.itemDiv = J;
                if (this.parentMenu.options.useDefaultStyles) {
                    J.style.fontSize = F;
                    J.style.color = H;
                    J.style.paddingLeft = "15px";
                    J.style.paddingRight = "6px";
                    J.style.cursor = "pointer"
                }
                if (W.text == "---") {
                    J.appendChild(document.createElement("hr"))
                } else {
                    if (M) {
                        var R = document.createElement("input");
                        R.type = "checkbox";
                        R.id = "cb" + W.id;
                        R.checked = W.selected;
                        R.defaultChecked = W.selected;
                        J.appendChild(R);
                        W.itemCheckbox = R;
                        if (this.parentMenu.options.useDefaultStyles) {
                            R.style.margin = "4px 10px 0 0";
                            R.style.verticalAlign = "top"
                        }
                    } else {
                        if (W.selected) {
                            var K = document.createElement("div");
                            f(K).addClass("eqjs-menu-markDiv");
                            var X = document.createTextNode("\u25CF");
                            K.appendChild(X);
                            J.appendChild(K)
                        }
                    } if (W.items && W.items.length > 0) {
                        f(J).addClass("eqjs-menu-itemDiv-hasChildren");
                        var O = document.createElement("span");
                        f(O).addClass("eqjs-menu-itemDiv-text");
                        J.appendChild(O);
                        var I = document.createTextNode(W.text);
                        O.appendChild(I);
                        var S = document.createElement("span");
                        f(S).addClass("eqjs-menu-itemDiv-arrow");
                        J.appendChild(S);
                        var N = document.createTextNode(">");
                        S.appendChild(N);
                        if (this.parentMenu.options.useDefaultStyles) {
                            J.style.textAlign = "right";
                            O.style["float"] = "left"
                        }
                    } else {
                        var I = document.createTextNode(W.text);
                        J.appendChild(I)
                    }
                    f(J).click(function(Z) {
                        var Y = this.menuItem;
                        if (M) {
                            if (Z.target != Y.itemCheckbox) {
                                Y.itemCheckbox.checked = !Y.itemCheckbox.checked
                            }
                        } else {
                            Q.activateItem(Y);
                            Q.submit(Y)
                        }
                    });
                    if (!M) {
                        f(J).mouseenter(function() {
                            var Y = this.menuItem;
                            if (U) {
                                Q.activateItem(Y)
                            }
                        });
                        f(J).mouseleave(function() {
                            var Y = this.menuItem;
                            if (Y == Q.activeItem && U && !Y.subLevel) {
                                Q.deactivateItem(Y)
                            }
                        })
                    }
                }
            }
        },
        remove: function() {
            var E = this.items.length;
            for (var F = 0; F < E; F++) {
                var G = this.items[F];
                if (typeof(G.subLevel) != "undefined") {
                    G.subLevel.remove()
                }
            }
            if (this.levelDiv) {
                this.levelDiv.innerHtml = "";
                var D = this.levelDiv.parentNode;
                if (D != null) {
                    D.removeChild(this.levelDiv)
                }
            }
            this.levelDiv = null
        },
        update: function(D) {
            this.remove();
            this.items = D;
            this.activeItem = null;
            this.selectedItem = null;
            this.applyItem.itemDiv = null;
            this.initialized = false;
            this.updated++;
            this.renderContent()
        },
        findItem: function(E) {
            var D = E.toLowerCase();
            var F = this.items.length;
            for (var G = 0; G < F; G++) {
                var H = this.items[G];
                if (H.text.toLowerCase().indexOf(D) == 0) {
                    return H
                }
            }
            return null
        }
    };

    function o(E, D, F) {
        this.parentMenu = E;
        this.levelIndex = F;
        this.levelDiv = null;
        this.applyItem = new Object();
        this.applyItem.itemDiv = null;
        this.items = D;
        this.activeItem = null;
        this.selectedItem = null;
        this.initialized = false;
        this.updated = 0;
        this.renderContent()
    }
    f.widget("eqjs.PopupMenu", {
        _mouseIsOverBlock: false,
        _mouseIsOverLink: false,
        _toId: null,
        _itemSelectedCallback: null,
        _menuClosedCallback: null,
        _rootLevel: null,
        options: {
            items: [],
            buttons: {
                submit: EQ.core.getText("ButtonApply"),
                cancel: EQ.core.getText("ButtonCancel")
            },
            useDefaultStyles: false,
            multiselect: false,
            adjustHeight: true,
            showSearchBoxAfter: 30,
            activateOnMouseOver: true,
            zIndex: 1000000
        },
        _create: function() {
            this._updateProps();
            this._rootLevel = new o(this, this.options.items, 0);
            f(this._rootLevel.levelDiv).addClass("eqjs-menu-rootLevel");
            f(this._rootLevel.levelDiv).css("z-index", this.options.zIndex);
            var E = this;
            this._menuKeyUpHandler = function(F) {
                if (F.which == 27) {
                    E.hideMenu();
                    F.stopImmediatePropagation()
                }
            };
            var D = function() {
                if (!E.active) {
                    return
                }
                var G = window.event || arguments[0];
                var H = G.srcElement || G.target;
                var F = true;
                while (H) {
                    if (H.tagName && H.tagName.toLowerCase() == "div") {
                        if (typeof(H.menuLevel) != "undefined") {
                            if (H.menuLevel.parentMenu == E) {
                                F = false;
                                break
                            }
                        }
                    }
                    H = H.parentNode || H.parentElement
                }
                if (F) {
                    E.hideMenu()
                }
            };
            f(document).on("mousedown", D);
            this._render()
        },
        _render: function() {
            var D = this
        },
        _updateProps: function() {
            this.style = {};
            this.style.colors = {
                border: "#666666",
                shadow: "#888888",
                bgON: "white",
                fgON: "black",
                bgOVER: "#B6BDD2",
                fgOVER: "black"
            };
            this.style.itemStyle = {
                fontSize: "14px"
            };
            this.minItemWidth = 0;
            this.maxItemWidth = 0;
            this.maxHeight = 0;
            this.zIndex = this.options.zIndex;
            this.commandTemplate = "";
            this.parentElement = null;
            this.args = [];
            this.active = false
        },
        _setOption: function(D, E) {
            if (arguments.length == 2) {
                this.options[D] = E;
                return this
            } else {
                return this.options[D]
            }
        },
        showMenu: function(M) {
            var L = this;
            L._itemSelectedCallback = M.itemSelectedCallback || null;
            L._menuClosedCallback = M.menuClosedCallback || null;
            var H = M.selectedIds || null;
            if (H) {
                if (typeof H === "string") {
                    H = H.split(",")
                }
                var K, D = L.options.items;
                var N = D.length;
                for (var F = 0; F < N; F++) {
                    K = D[F];
                    K.selected = f.inArray(K.id, H) >= 0
                }
            }
            var G = M.anchor || document.body;
            var E = q(G.get(0));
            var J = G.outerHeight(true);
            var I = {
                left: E.x,
                top: E.y + J + 2
            };
            this.active = true;
            L._rootLevel.showAt(I.left, I.top, false);
            f(document).on("keyup", this._menuKeyUpHandler)
        },
        hideMenu: function() {
            f(document).off("keyup", this._menuKeyUpHandler);
            this._rootLevel.hide();
            if (this._menuClosedCallback) {
                this._menuClosedCallback.call()
            }
        },
        submitMenu: function(D, F) {
            var E = {
                widget: this,
                menuItem: D,
                selectedItems: F
            };
            if (this._itemSelectedCallback) {
                this._itemSelectedCallback.apply(this, [null, E])
            } else {
                this._trigger("onMenuItemSelected", null, E)
            }
        },
        knockMenuStyle: function(D) {
            D.removeAttr("style");
            var E = D.find("ul").first().prop("style");
            if (E !== "undefined" && E !== false) {
                D.find("ul").first().prop("style", "")
            }
        },
        refreshItems: function() {
            this._rootLevel.refreshItems()
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.TimePicker", {
        options: {
            internalFormat: "hh:mm",
            onChange: function() {},
            setValue: function(c) {
                this.element._isValidValue(c)
            }
        },
        _convertToInternalFormat: function(d) {
            var c = d;
            return c
        },
        _raiseOnChange: function() {
            if (this.options && this.options.onChange) {
                this.options.onChange(this.time())
            }
        },
        _create: function() {
            var c = this;
            this.element.attr("maxLength", 5);
            this.time("");
            this.element.bind({
                focus: function() {},
                change: function() {},
                blur: function() {},
                keypress: function(g) {
                    var h = g.charCode || g.which;
                    var f = String.fromCharCode(h);
                    var d = c.element.val().replace("_", f);
                    if (c._isValidValue(d)) {
                        c.element.val(d)
                    }
                    g.preventDefault()
                },
                keydown: function(g) {
                    if (g.which == 8) {
                        var f = c.element.val();
                        var d = f.indexOf("_");
                        if (d < 0) {
                            d = f.length
                        }
                        if (d > 0) {
                            d--;
                            if (f.charAt(d) == ":") {
                                d--
                            }
                            f = c._setCharAt(f, d, "_");
                            c.element.val(f)
                        }
                        g.preventDefault()
                    } else {
                        if (g.which == 13) {
                            c._raiseOnChange()
                        }
                    }
                },
                focusout: function() {
                    c._raiseOnChange()
                }
            });
            this._render()
        },
        _setCharAt: function(e, c, d) {
            if (c > e.length - 1) {
                return e
            }
            return e.substr(0, c) + d + e.substr(c + 1)
        },
        _render: function() {},
        _toEditFormat: function(d) {
            if (this._isValidTime(d)) {
                var c = d.match(/^\d\d:\d\d/);
                if (c.length > 0) {
                    d = c[0]
                }
                return d
            } else {
                return this._getInitEditValue()
            }
        },
        _getInitEditValue: function() {
            return "__:__"
        },
        _fixValue: function(c) {
            c = c.replace(/\_/g, "0");
            return c
        },
        _isValidValue: function(d) {
            var c = this._fixValue(d);
            return this._isValidTime(c)
        },
        _isValidTime: function(e) {
            var d = /^(([0-1]?[0-9])|([2][0-4])):([0-5]?[0-9])(:([0-5]?[0-9]))?$/i;
            var c = d.test(e);
            return c
        },
        time: function() {
            if (arguments.length > 0) {
                var d = arguments[0];
                d = this._toEditFormat(d);
                this.element.val(d);
                this._render();
                return this
            } else {
                var c = this._fixValue(this.element.val());
                return c
            }
        }
    })
})(jQuery);
(function(c, b) {
    var a = b.EQ = b.EQ || {};
    a.client = {
        defaultQuery: new a.core.Query(),
        serviceUrl: "EasyQuery",
        _currentOptions: {},
        _updateActionUrls: function() {
            var d = a.core;
            this.loadModelUrl = d.combinePath(this.serviceUrl, "GetModel");
            this.loadQueryUrl = d.combinePath(this.serviceUrl, "GetQuery");
            this.saveQueryUrl = d.combinePath(this.serviceUrl, "SaveQuery");
            this.buildQueryUrl = d.combinePath(this.serviceUrl, "BuildQuery");
            this.syncQueryUrl = d.combinePath(this.serviceUrl, "SyncQuery");
            this.executeQueryUrl = d.combinePath(this.serviceUrl, "ExecuteQuery");
            this.executeSqlUrl = d.combinePath(this.serviceUrl, "ExecuteSql");
            this.currentQueryUrl = d.combinePath(this.serviceUrl, "CurrentQuery");
            this.listRequestUrl = d.combinePath(this.serviceUrl, "GetList");
            this.exportQueryResultUrl = d.combinePath(this.serviceUrl, "ExportToFile");
            this.loadQueryListUrl = d.combinePath(this.serviceUrl, "GetQueryList")
        },
        defaultListRequestHandler: function(e, d) {},
        queryChanged: function(e, d) {
            if (d) {
                this.defaultQuery.removeChangedCallback(e)
            } else {
                this.defaultQuery.addChangedCallback(e)
            }
        },
        tryGetCurrentQuery: function(d) {
            c.ajax({
                type: "POST",
                url: a.client.currentQueryUrl,
                dataType: "json",
                success: function(e) {
                    d(e)
                }
            })
        },
        controls: {},
        initControlsDefault: function(g) {
            var j = g || {};
            var f = g.queryPanelId || "QueryPanel";
            var d = g.columnsPanelId || "ColumnsPanel";
            var i = g.entitiesPanelId || "EntitiesPanel";
            var h = c("#" + f);
            if (h.length > 0) {
                j.queryPanel = j.queryPanel || {};
                h.QueryPanel(j.queryPanel);
                h.QueryPanel("setQuery", this.defaultQuery);
                this.controls.QPWidget = h
            }
            var k = c("#" + d);
            if (k.length > 0) {
                j.columnsPanel = j.columnsPanel || {};
                j.columnsPanel.query = this.defaultQuery;
                k.ColumnsPanel(j.columnsPanel);
                k.ColumnsPanel("setQuery", this.defaultQuery);
                this.controls.CPWidget = k
            }
            var e = c("#" + i);
            if (e.length > 0) {
                j.entitiesPanel = j.entitiesPanel || {};
                e.EntitiesPanel(j.entitiesPanel);
                e.EntitiesPanel("setModel", this.defaultQuery.getModel());
                this.controls.EPWidget = e
            }
        },
        init: function(g) {
            g = g || b.easyQuerySettings || this._currentOptions;
            this._currentOptions = g;
            if (g.serviceUrl) {
                a.client.serviceUrl = g.serviceUrl
            }
            if (g.menuOptions) {
                var e = this.menuOptions;
                var f = g.menuOptions;
                for (var d in e) {
                    if (e.hasOwnProperty(d) && f.hasOwnProperty(d)) {
                        e[d] = f[d]
                    }
                }
            }
            this._updateActionUrls();
            if (g.loadModelUrl) {
                this.loadModelUrl = g.loadModelUrl
            }
            if (g.loadQueryUrl) {
                this.loadQueryUrl = g.loadQueryUrl
            }
            if (g.saveQueryUrl) {
                this.saveQueryUrl = g.saveQueryUrl
            }
            if (g.buildQueryUrl) {
                this.buildQueryUrl = g.buildQueryUrl
            }
            if (g.syncQueryUrl) {
                this.syncQueryUrl = g.syncQueryUrl
            }
            if (g.executeQueryUrl) {
                this.executeQueryUrl = g.executeQueryUrl
            }
            if (g.executeSqlUrl) {
                this.executeSqlUrl = g.executeSqlUrl
            }
            if (g.currentQueryUrl) {
                this.currentQueryUrl = g.currentQueryUrl
            }
            if (g.listRequestUrl) {
                this.listRequestUrl = g.listRequestUrl
            }
            this.modelName = g.modelName || "";
            var h = g.defaultQueryName || "";
            g.queryPanel = g.queryPanel || {};
            this.defaultQuery.listRequestUrl = this.listRequestUrl;
            this.defaultQuery.clientListRequestHandler = g.listRequestHandler || g.queryPanel.listRequestHandler;
            this.initControlsDefault(g);
            if (this.modelName) {
                this.loadModel({
                    modelName: this.modelName,
                    success: g.onLoadModel
                })
            }
        },
        getQuery: function() {
            return this.defaultQuery
        },
        loadModel: function(f) {
            var d = this;
            var e = {
                modelName: f.modelName
            };
            c.ajax({
                type: "POST",
                url: a.client.loadModelUrl,
                data: e,
                dataType: "json",
                crossDomain: false,
                success: function(g) {
                    d.defaultQuery.loadModelObject(g);
                    if (d.controls.QPWidget) {
                        d.controls.QPWidget.QueryPanel("refresh")
                    }
                    if (d.controls.CPWidget) {
                        d.controls.CPWidget.ColumnsPanel("refresh")
                    }
                    if (d.controls.EPWidget) {
                        d.controls.EPWidget.EntitiesPanel("refresh")
                    }
                    if (f.success) {
                        f.success(g)
                    }
                },
                error: function(g, i, h) {
                    if (f.error) {
                        f.error(g.status, g.responseText, "LoadModel")
                    } else {
                        alert("LoadModel error: \n" + g.responseText)
                    }
                }
            })
        },
        loadQuery: function(f) {
            var d = this;
            var e = {
                queryName: f.queryName
            };
            c.ajax({
                type: "POST",
                url: a.client.loadQueryUrl,
                data: e,
                dataType: "json",
                beforeSend: f.beforeSend,
                success: function(g) {
                    d.defaultQuery.setObject(g);
                    if (d.controls.QPWidget) {
                        d.controls.QPWidget.QueryPanel("refresh")
                    }
                    if (d.controls.CPWidget) {
                        d.controls.CPWidget.ColumnsPanel("refresh")
                    }
                    if (f.success) {
                        f.success(g)
                    }
                },
                error: function(g, i, h) {
                    if (f.error) {
                        f.error(g.status, g.responseText, "LoadQuery")
                    } else {
                        alert("LoadQuery error: \n" + g.responseText)
                    }
                }
            })
        },
        loadQueryList: function(f) {
            var d = this;
            var e = {
                modelName: this.modelName
            };
            c.ajax({
                type: "GET",
                url: this.loadQueryListUrl,
                data: e,
                dataType: "json",
                beforeSend: f.beforeSend,
                success: function(g) {
                    if (f.success) {
                        f.success(g)
                    }
                },
                error: function(g, i, h) {
                    if (f.error) {
                        f.error(g.status, g.responseText, "LoadQueryList")
                    } else {
                        alert("LoadQueryList error: \n" + g.responseText)
                    }
                }
            })
        },
        clearQuery: function() {
            var d = this;
            var e = this.getQuery();
            e.clear();
            if (d.controls.QPWidget) {
                d.controls.QPWidget.QueryPanel("clearQuery")
            }
            if (d.controls.CPWidget) {
                d.controls.CPWidget.ColumnsPanel("refresh")
            }
        },
        saveQuery: function(e) {
            e = e || {};
            var f = e.queryName || "";
            e.query = e.query || this.getQuery();
            if (e.query) {
                var d = {
                    queryJson: e.query.toJSON(),
                    queryName: f
                };
                c.ajax({
                    type: "POST",
                    url: a.client.saveQueryUrl,
                    data: d,
                    dataType: "json",
                    beforeSend: e.beforeSend,
                    success: function(g) {
                        if (e.success) {
                            e.success(g)
                        }
                    },
                    error: function(g, i, h) {
                        if (e.error) {
                            e.error(g.status, g.responseText, "SaveQuery")
                        } else {
                            alert("SaveQuery error: \n" + g.responseText)
                        }
                    }
                })
            }
        },
        buildQuery: function(f) {
            f = f || {};
            f.query = f.query || this.getQuery();
            if (f.query) {
                var e = f.options || {};
                var d = {
                    queryJson: f.query.toJSON(),
                    optionsJson: JSON.stringify(e)
                };
                c.ajax({
                    type: "POST",
                    url: a.client.buildQueryUrl,
                    data: d,
                    dataType: "json",
                    beforeSend: f.beforeSend,
                    success: function(g) {
                        if (f.success) {
                            f.success(g)
                        }
                    },
                    error: function(g, i, h) {
                        if (f.error) {
                            f.error(g.status, g.responseText, "BuildQuery")
                        } else {
                            alert("BuildQuery error: \n" + g.responseText)
                        }
                    }
                })
            }
        },
        syncQuery: function(f) {
            f = f || {};
            f.query = f.query || this.getQuery();
            if (f.query) {
                var g = b.easyQuerySettings ? b.easyQuerySettings.syncQueryOptions : null;
                var e = f.options || g || {};
                var d = {
                    queryJson: f.query.toJSON(),
                    optionsJson: JSON.stringify(e)
                };
                c.ajax({
                    type: "POST",
                    url: a.client.syncQueryUrl,
                    data: d,
                    dataType: "json",
                    beforeSend: f.beforeSend,
                    success: function(h) {
                        if (f.success) {
                            f.success(h)
                        }
                    },
                    error: function(h, j, i) {
                        if (f.error) {
                            f.error(h.status, h.responseText, "SyncQuery")
                        } else {
                            alert("SyncQuery error: \n" + h.responseText)
                        }
                    }
                })
            }
        },
        buildAndExecute: function(g) {
            var d = this;
            g = g || {};
            g.query = g.query || this.getQuery();
            var f = g.options || {};
            var e = {
                queryJson: g.query.toJSON(),
                optionsJson: JSON.stringify(f)
            };
            c.ajax({
                type: "POST",
                url: d.executeQueryUrl,
                data: e,
                dataType: "json",
                beforeSend: g.beforeSend,
                success: function(h) {
                    if (g.success) {
                        g.success(h)
                    }
                },
                error: function(h, j, i) {
                    if (g.error) {
                        g.error(h.status, h.responseText, "ExecuteQuery")
                    } else {
                        alert("ExecuteQuery error: \n" + h.responseText)
                    }
                }
            })
        },
        exportQueryResult: function(g) {
            g = g || {
                exportType: "csv",
                fileName: "result.csv"
            };
            var d = this;
            var h = this.getQuery();
            if (h) {
                var f = {
                    queryJson: JSON.stringify(h),
                    optionsJson: JSON.stringify(g)
                };
                var e = d.exportQueryResultUrl;
                c.get(e, f, function(i) {})
            }
        }
    }
})(jQuery, window);
var poweredByOption = {
    show: true
};
(function(a, b) {
    a.widget("eqjs.ConditionRow", {
        _condition: null,
        _parentPredicate: null,
        _parentPredicateWidget: null,
        _buttonsBlock: null,
        _enableButton: null,
        _deleteButton: null,
        _addConditionButton: null,
        _addPredicateButton: null,
        _checkBox: null,
        _keepShowingButtons: false,
        _isMouseOverBlock: false,
        _active: false,
        options: {
            queryPanel: null
        },
        getQuery: function() {
            return this.options.queryPanel.getQuery()
        },
        getModel: function() {
            var c = this.getQuery();
            return c ? c.getModel() : null
        },
        getCondition: function() {
            return this._condition
        },
        getQueryPanel: function() {
            return this.options.queryPanel
        },
        makeActive: function() {
            var c = this.getQueryPanel();
            if (c) {
                c.setActiveCondition(this)
            }
        },
        init: function(e, d, c) {
            this.element.get(0).condition = e;
            this._condition = e;
            this._parentPredicate = d;
            this._parentPredicateWidget = c;
            this.refresh();
            if (this._condition.initAsActive) {
                this.setActiveCondition();
                delete this._condition.initAsActive
            }
        },
        _render: function() {
            this._clear();
            if (this.getModel() && this._condition) {
                this._refreshByCondition();
                if (!this._condition.readOnly) {
                    this._initButtons();
                    this._initCheckbox()
                }
            }
        },
        refresh: function() {
            this._render()
        },
        _isDisabled: function() {
            return this._condition.enabled === false
        },
        _setOption: function(c, d) {
            if (arguments.length == 2) {
                if (c === "disabled") {
                    this._setConditionEnable(!d)
                } else {
                    this.options[c] = d;
                    this._render()
                }
                return this
            } else {
                if (c === "disabled") {
                    return this._isDisabled()
                } else {
                    return this.options[c]
                }
            }
        },
        _setConditionEnable: function(c, d) {
            if (this._parentPredicate) {
                if (!c || !("enabled" in this._parentPredicate) || this._parentPredicate.enabled) {
                    this._setConditionEnableCore(this._condition, c, d);
                    if (!c) {
                        this._enableButton.removeClass("enabled")
                    } else {
                        this._enableButton.addClass("enabled")
                    }
                    this._render();
                    this._fireConditionChange("change", this._condition)
                }
            }
        },
        _setConditionEnableCore: function(c, d, e) {
            c.enabled = d;
            if (c.conditions && !e) {
                var f = c.conditions.length;
                for (var g = 0; g < f; g++) {
                    this._setConditionEnableCore(c.conditions[g], d)
                }
            }
            if (this._parentPredicateWidget) {
                this._parentPredicateWidget._checkAllDisabled()
            }
        },
        _clear: function() {
            this.element.html("");
            this.element.removeClass()
        },
        _refreshByCondition: function() {},
        _fireConditionChange: function(c, f, e) {
            var d = this;
            this.getQuery().fireChangedEvent({
                changeType: "condition." + c,
                condition: f,
                element: e || d.element
            })
        },
        remove: function() {
            var c = this;
            if (!c._parentPredicateWidget) {
                return
            }
            c._parentPredicateWidget.removeCondition(c._condition)
        },
        destroy: function() {
            a.Widget.prototype.destroy.call(this)
        },
        isPredicate: function() {
            return false
        },
        _getButtonsContainer: function() {
            return this.element
        },
        _initButtons: function() {
            var d = this;
            var c = d._getButtonsContainer();
            if (!c) {
                return
            }
            d._buttonsBlock = a("<div></div>").addClass("eqjs-qp-condition-buttonsBlock").appendTo(c);
            d._addConditionButton = a("<div></div>").addClass("eqjs-qp-condition-button eqjs-qp-condition-button-addCondition").attr("title", EQ.core.getText("ButtonAddCondition")).appendTo(d._buttonsBlock).click(function() {
                d._keepShowingButtons = true;
                d.options.queryPanel.showEntitiesMenu({
                    anchor: d._addConditionButton,
                    selectedIds: null,
                    itemSelectedCallback: function(e, h) {
                        var g = h.menuItem.data("id");
                        var f = d.getModel().getAttributeById(g);
                        if ("addNewCondition" in d) {
                            d.addNewCondition(g)
                        }
                    },
                    menuClosesCallback: function() {
                        d._keepShowingButtons = false;
                        if (!d._isMouseOverBlock) {
                            d._leaveButtonBlock()
                        }
                    }
                }, {})
            });
            d._addPredicateButton = a("<div></div>").addClass("eqjs-qp-condition-button eqjs-qp-condition-button-addPredicate").attr("title", EQ.core.getText("ButtonAddPredicate")).appendTo(d._buttonsBlock).click(function() {
                if ("addNewPredicate" in d) {
                    d.addNewPredicate()
                }
            });
            d._enableButton = a("<div></div>").addClass("eqjs-qp-condition-button eqjs-qp-condition-button-enable").attr("title", EQ.core.getText("ButtonEnable")).appendTo(d._buttonsBlock).click(function() {
                d.option("disabled", !d._isDisabled());
                d._enableButton.trigger("mouseover")
            });
            d._deleteButton = a("<div></div>").addClass("eqjs-qp-condition-button eqjs-qp-condition-button-delete").attr("title", EQ.core.getText("ButtonDelete")).appendTo(d._buttonsBlock).click(function() {
                d.remove()
            });
            if (d._isDisabled()) {
                d._enableButton.removeClass("enabled")
            } else {
                d._enableButton.addClass("enabled")
            }
            c.find("[class*=eqjs-qp-condition-button]").hover(function() {
                a(this).addClass("eqjs-qp-condition-button-active")
            }, function() {
                a(this).removeClass("eqjs-qp-condition-button-active")
            });
            c.bind("mouseenter", function(e) {
                d._isMouseOverBlock = true;
                d._enterButtonBlock();
                e.stopPropagation();
                return false
            }).bind("mouseleave", function(e) {
                d._isMouseOverBlock = false;
                if (!d._keepShowingButtons && d._buttonsBlock.is(":visible")) {
                    d._leaveButtonBlock()
                }
                e.stopPropagation();
                return false
            });
            d._hideButtons();
            d._adjustButtonsVisibility()
        },
        _initCheckbox: function() {
            var d = this;
            var c = d._getButtonsContainer();
            if (!c) {
                return
            }
            if (d.options.queryPanel.options.showCheckboxes) {
                d._checkBox = a("<div></div>").addClass("eqjs-qp-condelement eqjs-qp-condition-checkbox").attr("title", EQ.core.getText("ButtonEnable")).prependTo(c).click(function() {
                    d.option("disabled", !d._isDisabled());
                    d._adjustCheckbox();
                    d._checkBox.trigger("mouseover")
                });
                d._adjustCheckbox()
            }
        },
        _isFirstConditionInGroup: function() {
            var c = this._parentPredicate ? a.inArray(this._condition, this._parentPredicate.conditions) : 0;
            return (c == 0)
        },
        _renderConjunction: function() {
            var f = this;
            var e = f._getButtonsContainer();
            if (!e) {
                return
            }
            if (f.options.queryPanel.options.showConjunctions && !f._isFirstConditionInGroup()) {
                var c = f._parentPredicate.linkType;
                var d = EQ.core.getText("Conj" + c);
                if (d) {
                    f._conjuction = a("<span>" + d + "</span>").addClass("eqjs-qp-condelement eqjs-qp-condition-conjuction").prependTo(e)
                }
            }
        },
        _adjustCheckbox: function() {
            var c = this;
            if (!c._checkBox) {
                return
            }
            if (c._condition.enabled === false) {
                c._checkBox.removeClass("enabled")
            } else {
                c._checkBox.addClass("enabled")
            }
        },
        _adjustButtonsVisibility: function() {},
        _enterButtonBlock: function() {
            this._showButtons()
        },
        _leaveButtonBlock: function() {},
        _showButtons: function() {},
        _hideButtons: function() {
            if (this._addConditionButton) {
                this._addConditionButton.css("background-image", "none")
            }
            if (this._addPredicateButton) {
                this._addPredicateButton.css("background-image", "none")
            }
            if (this._enableButton) {
                this._enableButton.css("background-image", "none")
            }
            if (this._deleteButton) {
                this._deleteButton.css("background-image", "none")
            }
        },
        activate: function() {
            this._active = true;
            this.adjustActiveClass();
            this._hideButtons();
            this._adjustButtonsVisibility()
        },
        deactivate: function() {
            this._active = false;
            this.adjustActiveClass();
            this._hideButtons();
            this._adjustButtonsVisibility()
        },
        adjustActiveClass: function() {
            if (this._active) {
                this.element.addClass("active")
            } else {
                this.element.removeClass("active")
            }
        },
        setActiveCondition: function() {
            this.options.queryPanel.setActiveCondition(this)
        },
        isActive: function() {
            return this._active
        },
        getLevel: function() {
            if (this._parentPredicateWidget) {
                return this._parentPredicateWidget.getLevel() + 1
            } else {
                return 0
            }
        },
        _renderLevelOffset: function() {
            var e = this.getLevel();
            var d;
            for (var c = 0; c < e - 1; c++) {
                d = a("<div></div>").addClass("eqjs-qp-level-offset").prependTo(this._getButtonsContainer())
            }
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.ConditionRow_SMPL", a.eqjs.ConditionRow, {
        _displayFormatParser: {
            formatStr: "",
            pos: 0,
            exprNum: 0,
            token: "text",
            tokenText: "",
            start: function(c) {
                this.formatStr = c;
                this.pos = 0;
                this.exprNum = 0;
                this.tokenText = ""
            },
            skipSpaces: function() {
                while (this.pos < this.formatStr.length && this.formatStr.charAt(this.pos) === " ") {
                    this.pos++
                }
            },
            next: function() {
                this.skipSpaces();
                if (this.pos >= this.formatStr.length) {
                    return false
                }
                var e = 0;
                if (this.formatStr.charAt(this.pos) === "{") {
                    e = this.formatStr.indexOf("}", this.pos);
                    if (e < 0) {
                        return false
                    }
                    this.tokenText = this.formatStr.substring(this.pos, e + 1);
                    if (this.tokenText.indexOf("{expr") === 0) {
                        this.token = "expression";
                        this.exprNum = parseInt(this.tokenText.substring(5, this.tokenText.length))
                    }
                    this.pos = e + 1
                } else {
                    if (this.formatStr.charAt(this.pos) === "[" && this.pos < this.formatStr.length - 1 && this.formatStr.charAt(this.pos + 1) === "[") {
                        this.pos += 2;
                        e = this.formatStr.indexOf("]]", this.pos);
                        this.token = "operator";
                        this.tokenText = this.formatStr.substring(this.pos, e);
                        this.pos = e + 2
                    } else {
                        this.token = "text";
                        var d = this.formatStr.indexOf("{", this.pos);
                        if (d < 0) {
                            d = this.formatStr.length
                        }
                        var c = this.formatStr.indexOf("[[", this.pos);
                        if (c < 0) {
                            c = this.formatStr.length
                        }
                        e = Math.min(d, c);
                        this.tokenText = a.trim(this.formatStr.substring(this.pos, e));
                        this.pos = e
                    }
                }
                return true
            }
        },
        _refreshByCondition: function() {
            if (!this._condition || !this.getModel()) {
                return
            }
            var q = this;
            q.options.disabled = !q._condition.enabled || q._condition.readOnly;
            this.element.addClass("eqjs-qp-row eqjs-qp-row-condition");
            if (this._condition.enabled === false) {
                this.element.addClass("eqjs-qp-disabled")
            }
            if (this._condition.readOnly) {
                this.element.addClass("eqjs-qp-readonly")
            }
            if (this._condition.justAdded) {
                this._updateValueExpressions();
                this._condition.justAdded = false
            }
            var e = q.getModel().getOperatorById(q._condition.operatorID);
            var d = q._parseDisplayFormat(e);
            var o = null;
            var k = d.length;
            for (var l = 0; l < k; l++) {
                o = d[l];
                var f, g;
                if (o.type === "operator") {
                    if (this._condition.enabled !== false && !this._condition.readOnly) {
                        g = a("<a></a>", {
                            href: "javascript:void(0)",
                            text: o.text
                        })
                    } else {
                        g = a("<span></span>", {
                            text: o.text
                        })
                    }
                    var c = a("<div></div>");
                    c.addClass("eqjs-qp-condelement eqjs-qp-operelement");
                    g.appendTo(c);
                    c.appendTo(this.element);
                    if (this._condition.enabled !== false && !this._condition.readOnly) {
                        var j = q._createOperatorsMenu(g);
                        g.click(function(r) {
                            j.PopupMenu("showMenu", {
                                anchor: g
                            })
                        })
                    }
                } else {
                    if (o.type === "expression") {
                        if (o.index === 0) {
                            var i = this._createAttrElement(this._condition.expressions[0], function(t) {
                                var r = t.operators[0];
                                var s = q._condition.expressions.length;
                                q._condition.expressions.splice(1, s - 1);
                                q._condition.operatorID = r;
                                q._updateValueExpressions()
                            });
                            i.appendTo(this.element)
                        } else {
                            var n;
                            var h = this._condition.expressions[o.index];
                            if (h.kind === "Attribute") {
                                n = this._createAttrElement(h);
                                n.appendTo(this.element)
                            } else {
                                n = a("<div></div>");
                                n.appendTo(this.element);
                                this._createValueEditor(n, h)
                            }
                        }
                    } else {
                        if (o.type === "text") {
                            var m = a("<span></span>").addClass("eqjs-qp-condelement").text(o.text).appendTo(this.element)
                        }
                    }
                }
            }
            if (q.options.queryPanel.options.accentActiveCondition) {
                q.element.click(function() {
                    if (!q._active) {
                        q.setActiveCondition()
                    }
                })
            }
            q.adjustActiveClass();
            q._adjustCheckbox();
            this._renderConjunction();
            this._renderLevelOffset()
        },
        _createAttrElement: function(h, i) {
            var e = this;
            var g = a("<div></div>");
            var f = h.id;
            var d = this.getModel().getAttributeById(f);
            var c;
            if (this._condition.enabled !== false && !this._condition.readOnly) {
                c = a('<a href="javascript:void(0)">' + e._getAttributeText(d) + "</a>");
                c.click(function(j) {
                    e.options.queryPanel.showEntitiesMenu({
                        anchor: c,
                        selectedIds: null,
                        itemSelectedCallback: function(k, n) {
                            var m = n.menuItem.data("id");
                            var l = e.getModel().getAttributeById(m);
                            h.id = m;
                            if (i) {
                                i(l)
                            }
                            e.refresh();
                            e._fireConditionChange("change", e._condition);
                            return false
                        }
                    }, {})
                })
            } else {
                c = a("<span>" + e._getAttributeText(d) + "</span>")
            }
            g.addClass("eqjs-qp-condelement eqjs-qp-attrelement");
            c.appendTo(g);
            return g
        },
        _getOperatorCaption: function(d) {
            var c = EQ.core.getText("Operators", d.id, "caption");
            if (!c) {
                c = d.caption
            }
            return c
        },
        _parseDisplayFormat: function(d) {
            var e = EQ.core.getText("Operators", d.id, "displayFormat");
            if (!e) {
                e = d.displayFormat
            }
            var c = [];
            var f = this._displayFormatParser;
            f.start(e);
            while (f.next()) {
                if (f.token === "operator") {
                    c.push({
                        type: "operator",
                        text: f.tokenText
                    })
                } else {
                    if (f.token === "expression") {
                        c.push({
                            type: "expression",
                            index: f.exprNum - 1
                        })
                    } else {
                        if (f.token === "text") {
                            c.push({
                                type: "text",
                                text: f.tokenText
                            })
                        }
                    }
                }
            }
            return c
        },
        _getAttributeText: function(f) {
            var d = this;
            var i = EQ.core.getText("Attributes", f.id);
            if (!i) {
                i = f.caption
            }
            if (!d.options.queryPanel) {
                return i
            }
            var g = d.options.queryPanel.options.attrElementFormat;
            if (!g) {
                return i
            }
            var c = g.replace(new RegExp("{attr}", "g"), i),
                h = this.getModel().getFullEntityPathByAttr(f.id, "."),
                e = c.replace(new RegExp("{entity}", "g"), h),
                c = a.trim(e);
            return c
        },
        _operatorChanged: function(c, e) {
            var d = this;
            this._updateValueExpressions(c);
            this._fireConditionChange("change", this._condition)
        },
        _areCompatibleTypes: function(d, c) {
            if (typeof(d) === "undefined") {
                return true
            }
            if (c == "WideString" || c == "String") {
                return true
            }
            return (d == c)
        },
        _areCompatibleEditors: function(d, c) {
            if (!d || !c) {
                if (d == c) {
                    return true
                } else {
                    return false
                }
            }
            if (d == c) {
                return true
            }
            if (d.type == c.type) {
                if (d.type == "EDIT" || d.type == "DATETIME") {
                    return true
                }
                if (d.type == "CUSTOMLIST" && d.name == c.name) {
                    return true
                }
            }
            return false
        },
        _updateValueExpressions: function(h) {
            var q = this;
            var d = q._condition.expressions[0].id;
            var e = this.getModel().getAttributeById(d);
            if (!e) {
                return
            }
            var k = this.getModel().getOperatorById(h);
            var o = (k && k.exprType && k.exprType !== "Unknown") ? k.exprType : e.dataType;
            var c = q._condition.operatorID;
            var f = this.getModel().getOperatorById(c);
            if (!f) {
                return
            }
            var m = (f.exprType && f.exprType !== "Unknown") ? f.exprType : e.dataType;
            var l = q._getDefaultEditor(h, d);
            var n = q._getDefaultEditor(c, d);
            var g = q._condition.expressions.length;
            var j = 1;
            while (j < f.paramCount) {
                if (j >= g) {
                    q._condition.expressions.push(q._createValueExpression(m, f.valueKind))
                } else {
                    if (!q._areCompatibleEditors(l, n) || !q._areCompatibleTypes(o, m) || k.valueKind != f.valueKind) {
                        q._condition.expressions[j] = q._createValueExpression(m, f.valueKind)
                    }
                }
                j++
            }
            if (g > j) {
                q._condition.expressions.splice(j, g - j)
            }
        },
        _createValueExpression: function(g, f) {
            var d = this;
            var e;
            if (f === "Query") {
                e = {
                    typeName: "QUERY",
                    dataType: g,
                    kind: f,
                    value: EQ.core.getEmptyQueryObject(),
                    text: ""
                }
            } else {
                if (f === "Attribute") {
                    var c = d.getModel().getFirstUICAttr();
                    e = {
                        typeName: "ENTATTR",
                        dataType: g,
                        kind: f,
                        id: c.id,
                        value: c.id,
                        text: ""
                    }
                } else {
                    e = {
                        typeName: "CONST",
                        dataType: g,
                        kind: f,
                        value: "",
                        text: ""
                    }
                }
            }
            return e
        },
        _createOperatorsMenu: function(e) {
            var j = this;
            if (!j._condition || !j.getModel()) {
                return
            }
            var g = [];
            var f = j.getModel().getAttributeById(j._condition.expressions[0].id);
            if (f) {
                var d = null;
                var c = f.operators.length;
                for (var i = 0; i < c; i++) {
                    d = j.getModel().findOperatorById(f.operators[i]);
                    if (d && !(j.options.queryPanel.options.isSubQuery && d.valueKind === "Query")) {
                        var k = j._getOperatorCaption(d);
                        g.push({
                            id: d.id,
                            text: k
                        })
                    }
                }
            }
            var h = a("<div></div>").appendTo(e.parent()).hide();
            h.PopupMenu({
                items: g,
                onMenuItemSelected: function(l, n) {
                    e.text(n.menuItem.text);
                    var m = j._condition.operatorID;
                    j._condition.operatorID = n.menuItem.id;
                    j._operatorChanged(m, j._condition.operatorID);
                    return false
                }
            });
            return h
        },
        _getDefaultEditor: function(d, g) {
            var e = null;
            var c = this.getModel().findOperatorById(d);
            var f = this.getModel().getAttributeById(g);
            if (c && c.defaultEditor) {
                e = c.defaultEditor
            } else {
                if (f && f.defaultEditor) {
                    e = f.defaultEditor
                }
            }
            return e
        },
        _getEditorType: function(c, d) {
            if (d && d.kind === "Query") {
                return "SUBQUERY"
            } else {
                return c ? c.type : "EDIT"
            }
        },
        _createValueEditor: function(f, i) {
            var d = this;
            var h = this._getDefaultEditor(this._condition.operatorID, this._condition.expressions[0].id);
            var c = this._getEditorType(h, i);
            var g = "element.ValueEditor_" + c + "({conditionWidget:self, editor: editorDescr, onChange:changeCallback}); element.ValueEditor_" + c + "('init', expr);";
            var j = new Function("self, element, expr, editorDescr, changeCallback", g);
            var e = function() {
                d._fireConditionChange("change", d._condition)
            };
            j(this, f, i, h, e)
        },
        _showButtons: function() {
            if (!this.options.queryPanel.options.showCheckboxes && this._enableButton) {
                this._enableButton.css("background-image", "")
            }
            if (this._deleteButton) {
                this._deleteButton.css("background-image", "")
            }
        },
        _adjustButtonsVisibility: function() {
            if (this.options.queryPanel.options.alwaysShowButtonsInConditions || (this.options.queryPanel.options.accentActiveCondition && this._active)) {
                this._showButtons()
            }
        },
        _leaveButtonBlock: function() {
            if (this.options.queryPanel.options.alwaysShowButtonsInConditions != true && (!this._active || this.options.queryPanel.options.accentActiveCondition != true)) {
                this._hideButtons()
            }
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.ConditionRow_PDCT", a.eqjs.ConditionRow, {
        _predicateRowBlock: null,
        _getButtonsContainer: function() {
            return this._predicateRowBlock
        },
        _parsePredicateText: function(e, h) {
            var k = this;
            var d = function() {
                k._fireConditionChange("change", k._condition);
                k.refresh()
            };
            var c = EQ.core.getText(h);
            var f = c.indexOf("{lt}");
            if (f < 0) {
                e.text(EQ.core.getText("ErrIncorrectPredicateTitleFormat"));
                e.addClass("eqjs-qp-error")
            } else {
                if (f > 0) {
                    var i = a("<span></span>").addClass("eqjs-qp-predelement").text(c.substring(0, f)).appendTo(e)
                }
                var j = a("<div></div>");
                j.PredicateLinkType({
                    queryPanel: k.options.queryPanel,
                    conditionWidget: k,
                    onChange: d
                });
                j.PredicateLinkType("init", k._condition);
                j.appendTo(e);
                var g = a("<span></span>").addClass("eqjs-qp-predelement").text(c.substring(f + 4)).appendTo(e)
            }
        },
        _refreshPredicateRow: function() {
            var c = this;
            if (!c._predicateRowBlock) {
                return
            }
            c._predicateRowBlock.html("");
            c._predicateRowBlock.addClass("eqjs-qp-row eqjs-qp-row-predicate");
            if (c._condition.enabled === false) {
                c._predicateRowBlock.addClass("eqjs-qp-disabled")
            }
            c._parsePredicateText(c._predicateRowBlock, "PredicateTitle");
            if (c.options.queryPanel.options.accentActiveCondition) {
                c._predicateRowBlock.click(function() {
                    if (!c._active) {
                        c.setActiveCondition()
                    }
                })
            }
            c.adjustActiveClass();
            this._renderConjunction();
            this._renderLevelOffset()
        },
        _refreshByCondition: function() {
            var c = this;
            c.element.addClass("eqjs-qp-predicate");
            c._predicateRowBlock = a("<div></div>");
            c._predicateRowBlock.appendTo(c.element);
            c._refreshPredicateRow();
            c._addConditions(c.element)
        },
        _addConditions: function(e) {
            var c = a("<div></div>");
            c.addClass("eqjs-qp-conditions");
            c.appendTo(e);
            var h = this._condition.conditions.length;
            for (var j = 0; j < h; j++) {
                var d = a("<div></div>");
                d.appendTo(c);
                var g = this._condition.conditions[j];
                var f = "element.ConditionRow_" + g.typeName + "({queryPanel: self.options.queryPanel, model: self.getModel()}); element.ConditionRow_" + g.typeName + "('init', self._condition.conditions[idx], self._condition, self);";
                var i = new Function("self, element, idx", f);
                i(this, d, j)
            }(!c.children().length) ? c.hide() : c.show();
            return c
        },
        _checkAllDisabled: function() {
            if (this._parentPredicate) {
                var c = true;
                var d = this._condition.conditions.length;
                for (var e = 0; e < d; e++) {
                    if (this._condition.conditions[e].enabled) {
                        c = false;
                        break
                    }
                }
                if (c) {
                    this._setConditionEnable(false, true)
                }
            }
        },
        _moveDraggedItem: function(e, d, c) {},
        isPredicate: function() {
            return true
        },
        _containsActiveCondition: function(c) {
            var e = this;
            var d = c || e._condition;
            var f = e.options.queryPanel._activeCondition;
            if (f) {
                f = f._condition
            }
            return e.options.queryPanel.predicateContainsCondition(d, f)
        },
        removeCondition: function(e) {
            var c = this;
            var d = a.inArray(e, c._condition.conditions);
            if (d >= 0) {
                if (c._condition.conditions.length == 1 && c._parentPredicate) {
                    c.remove()
                } else {
                    if (c._containsActiveCondition()) {
                        c.setActiveCondition()
                    }
                    c._condition.conditions.splice(d, 1);
                    c.refresh();
                    this._fireConditionChange("delete", e)
                }
            }
        },
        addCondition: function(e, d) {
            var c = this;
            if (!e || (a.isArray(e) && e.length == 0)) {
                return
            }
            if (typeof d == "number") {
                c._condition.conditions.push.apply(c._condition.conditions, [d, 0].concat(e))
            } else {
                c._condition.conditions.push.apply(c._condition.conditions, [].concat(e))
            }
            e.initAsActive = true;
            this._fireConditionChange("add", e)
        },
        addNewCondition: function(e, l, h) {
            var n = this;
            var c, m, j, o;
            var k = function(i, q) {
                if (!i) {
                    return null
                }
                if (!i.UIC) {
                    return null
                }
                return {
                    justAdded: true,
                    typeName: "SMPL",
                    enabled: true,
                    operatorID: q,
                    expressions: [{
                        typeName: n.options.queryPanel.options.attrClassName,
                        id: i.id
                    }]
                }
            };
            var g = n.getModel();
            if (a.isArray(e)) {
                m = [];
                var d = e.length;
                for (var f = 0; f < d; f++) {
                    c = g.getAttributeById(e[f]);
                    if (!c) {
                        continue
                    }
                    o = l ? l : g.getDefaultOperatorIdForAttr(c);
                    j = k(c, o);
                    if (j) {
                        m.push(j)
                    }
                }
            } else {
                c = g.getAttributeById(e);
                if (!c) {
                    return
                }
                o = l ? l : g.getDefaultOperatorIdForAttr(c);
                m = k(c, o)
            }
            n.addCondition(m, h);
            return j
        },
        addNewPredicate: function() {
            var f = this;
            var h = f.getModel().getFirstUICAttr();
            var g = h ? h.id : -1;
            var e = h ? h.operators[0] : -1;
            var i = {
                justAdded: true,
                typeName: "SMPL",
                enabled: true,
                operatorID: e,
                expressions: [{
                    typeName: f.options.queryPanel.options.attrClassName,
                    id: g
                }]
            };
            var d = f._condition.linkType === "All" ? "Any" : "All";
            var c = {
                typeName: "PDCT",
                linkType: d,
                conditions: []
            };
            c.conditions.push(i);
            this.addCondition(c)
        },
        _showButtons: function() {
            if (this._condition.enabled != false) {
                if (this._addConditionButton) {
                    this._addConditionButton.css("background-image", "")
                }
                if (this._addPredicateButton) {
                    this._addPredicateButton.css("background-image", "")
                }
            }
            if (!this.options.queryPanel.options.showCheckboxes && this._enableButton) {
                this._enableButton.css("background-image", "")
            }
            if (this._deleteButton) {
                this._deleteButton.css("background-image", "")
            }
        },
        _adjustButtonsVisibility: function() {
            if (this.options.queryPanel.options.alwaysShowButtonsInPredicates || (this.options.queryPanel.options.accentActiveCondition && this._active)) {
                this._showButtons()
            }
        },
        _leaveButtonBlock: function() {
            if (this.options.queryPanel.options.alwaysShowButtonsInPredicates != true && (!this._active || this.options.queryPanel.options.accentActiveCondition != true)) {
                this._hideButtons()
            }
        },
        activate: function() {
            this._active = true;
            this.adjustActiveClass();
            this._hideButtons();
            this._adjustButtonsVisibility()
        },
        deactivate: function() {
            this._active = false;
            this.adjustActiveClass();
            this._hideButtons();
            this._adjustButtonsVisibility()
        },
        adjustActiveClass: function() {
            if (this._active) {
                this._predicateRowBlock.addClass("active")
            } else {
                this._predicateRowBlock.removeClass("active")
            }
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.RootPredicate", a.eqjs.ConditionRow_PDCT, {
        _showButtons: function() {
            this._addConditionButton.css("background-image", "");
            this._addPredicateButton.css("background-image", "")
        },
        _initCheckbox: function() {},
        _renderConjunction: function() {},
        _refreshPredicateRow: function() {
            var c = this;
            if (!c._predicateRowBlock) {
                return
            }
            c._predicateRowBlock.html("");
            c._predicateRowBlock.addClass("eqjs-qp-row eqjs-qp-row-predicate eqjs-qp-row-predicate-root");
            c._parsePredicateText(c._predicateRowBlock, "RootPredicateTitle");
            if (c.options.queryPanel.options.accentActiveCondition) {
                c._predicateRowBlock.click(function() {
                    if (!c._active) {
                        c.setActiveCondition()
                    }
                })
            }
            c.adjustActiveClass()
        },
        _refreshByCondition: function() {
            var c = this;
            c.element.addClass("eqjs-qp-predicate eqjs-qp-predicate-root");
            var e = 0;
            if (c.options.queryPanel && c.options.queryPanel.options.showRootRow) {
                c._predicateRowBlock = a("<div></div>");
                c._predicateRowBlock.appendTo(c.element);
                c._refreshPredicateRow();
                e += c._predicateRowBlock.outerHeight()
            }
            var g = c._addConditions(c.element);
            var d = c.options.queryPanel.element.innerHeight();
            var f = c.options.queryPanel.addRowHeight;
            if (g) {
                g.css({
                    "max-height": (d - f - e - 12) + "px"
                })
            }
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.QueryPanel", {
        _activeCondition: null,
        _rootPredicateWidget: null,
        _query: null,
        _defaultMenuOptions: {
            showSearchBoxAfter: 30,
            activateOnMouseOver: true
        },
        options: {
            isSubQuery: false,
            activeCondition: null,
            listRequestHandler: null,
            entitiesPopupHandler: null,
            entitiesListFilter: null,
            showRootRow: true,
            showAddRow: true,
            showCheckboxes: false,
            showPoweredBy: true,
            alwaysShowButtonsInPredicates: false,
            alwaysShowButtonsInConditions: false,
            showConjunctions: true,
            accentActiveCondition: true,
            activateRootOnStart: true,
            dateFormatValue: "mm/dd/yy",
            dateFormatDisplay: "d MM, yy",
            attrElementFormat: "{entity} {attr}",
            menuSearchBoxAfter: 30,
            menuOptions: {
                showSearchBoxAfter: 30,
                activateOnMouseOver: true
            },
            adjustEntitiesMenuHeight: true,
            subQueryDialogWidth: 600,
            subQueryDialogHeight: 300,
            dialogZIndex: 100000,
            numberDecimalSeparatorDisplay: ".",
            numberListSeparators: [",", ";"],
            attrClassName: "ENTATTR",
            defaultQuery: {
                root: {
                    linkType: "All",
                    enabled: true,
                    conditions: []
                },
                columns: [],
                justsorted: []
            }
        },
        addRowHeight: 0,
        getSelf: function() {
            return this
        },
        getQuery: function() {
            return this._query
        },
        setQuery: function(c) {
            this._setQueryObserver(true);
            this._query = c;
            this._setQueryObserver();
            this.refresh()
        },
        isQueryNullOrEmpty: function() {
            var c = this.getQuery();
            return !c || c.isEmptyConditions()
        },
        getModel: function() {
            var c = this.getQuery();
            return c ? c.getModel() : null
        },
        isModelNullOrEmpty: function() {
            var c = this.getModel();
            return !c || c.isEmpty()
        },
        _updateLists: function() {
            var c = EQ.core.constLists;
            for (var d in c) {
                if (c.hasOwnProperty(d)) {
                    this._updateList(c[d])
                }
            }
            this._updateList(EQ.core.predicateLinkTypeList)
        },
        _updateList: function(d) {
            if (!d) {
                return
            }
            var e = d.length;
            for (var c = 0; c < e; c++) {
                d[c].text = EQ.core.getText(d[c].key);
                if (!d[c].text) {
                    d[c].text = d[c].key
                }
            }
        },
        _create: function() {
            var c = this;
            if (typeof(poweredByOption) == "undefined") {
                poweredByOption = {}
            }
        },
        _render: function() {
            var e = this;
            this._clear();
            this._updateLists();
            if (!this.isModelNullOrEmpty()) {
                this.options.entitiesList = this.getEntitiesList({
                    addUIC: true,
                    addUIR: false,
                    addUIS: false
                });
                this.options.entitiesMenu = this._createEntitiesMenu();
                var g = a("<div></div>");
                g.appendTo(this.element);
                if (this.options.showAddRow) {
                    var d = a('<div class="eqjs-qp-addrow"></div>');
                    d.appendTo(this.element);
                    if (!e.options.showRootRow && (!e.isQueryNullOrEmpty())) {
                        d.addClass("eqjs-qp-addrow-empty")
                    }
                    var h = a('<a href="javascript:void(0)">' + EQ.core.getText("CmdClickToAddCondition") + "</a>");
                    h.appendTo(d);
                    h.click(function(i) {
                        e.showEntitiesMenu({
                            anchor: h,
                            selectedIds: null,
                            itemSelectedCallback: function(j, l) {
                                var k = l.menuItem.data("id");
                                e.addNewCondition(k);
                                return false
                            }
                        }, {})
                    });
                    e.addRowHeight = d.outerHeight()
                }
                this._refreshByQuery(g)
            }
            e.element.droppable({
                hoverClass: "eqjs-drophover",
                scope: "entityAttr",
                drop: function(i, j) {
                    e.addNewCondition(j.draggable.data("id"))
                },
                over: function(j, k) {
                    k.helper.addClass("eqjs-qc-column-drag");
                    var i = e.getModel().getAttributeById(k.draggable.data("id"));
                    if (i.UIC != true) {
                        k.helper.addClass("eqjs-qc-column-drag-forbidden")
                    }
                },
                out: function(i, j) {
                    j.helper.removeClass("eqjs-qc-column-drag");
                    j.helper.removeClass("eqjs-qc-column-drag-forbidden")
                }
            });
            if (e.options.showPoweredBy || poweredByOption.show === true) {
                var c = a("<a></a>", {
                    text: "Powered by EasyQuery",
                    href: "http://devtools.korzh.com/easyquery/",
                    target: "_blank",
                    css: {
                        color: "#4676AE",
                        font: "11px Calibri",
                        "text-decoration": "underline"
                    }
                }).appendTo(e.element);
                var f = function() {
                    c.css({
                        position: "absolute",
                        bottom: "5px",
                        right: "10px"
                    });
                    if (c.parents("div[class*=ui-dialog]").length != 0) {
                        c.parents("div[class*=ui-dialog]").find(c).hide()
                    }
                };
                f()
            }
        },
        _activateRootPredicate: function() {
            if (this.options.showRootRow && this.options.accentActiveCondition && this.options.activateRootOnStart) {
                if (this._rootPredicateWidget) {
                    this.setActiveCondition(this._rootPredicateWidget)
                }
            }
        },
        _setOption: function(c, d) {
            if (arguments.length == 2) {
                if (c == "model") {
                    this.clearQuery(false);
                    this.options[c] = d;
                    this._render();
                    this._activateRootPredicate()
                } else {
                    if (c == "query") {
                        this.setQuery(d)
                    } else {
                        if (c == "menuOptions") {
                            this.options.menuOptions = a.extend({}, this._defaultMenuOptions, d)
                        } else {
                            if (c == "searchBoxAfter") {
                                this.options[c] = d;
                                this.options.menuOptions.showSearchBoxAfter = d
                            } else {
                                this.options[c] = d;
                                this._render()
                            }
                        }
                    }
                }
                return this
            } else {
                return this.options[c]
            }
        },
        _setQueryObserver: function(c) {
            var d = this;
            var e = function(g) {
                d._render()
            };
            var f = this.getQuery();
            if (f) {
                if (c) {
                    f.removeChangedCallback(e)
                } else {
                    f.addChangedCallback(e)
                }
            }
        },
        _clear: function() {
            this.element.html("")
        },
        _refreshByQuery: function(c) {
            c.RootPredicate({
                queryPanel: this,
                model: this.getModel()
            });
            c.RootPredicate("init", this.getQuery().getRootPredicate(), null, null);
            this._rootPredicateWidget = c.data("RootPredicate");
            if (!this._rootPredicateWidget) {
                this._rootPredicateWidget = c.data("eqjs-RootPredicate")
            }
            return c
        },
        clearConditions: function(c) {
            var d = this.getQuery();
            d.clearConditions();
            if (c !== false) {
                this.refresh()
            }
        },
        clearQuery: function(c) {
            var d = this.getQuery();
            d.clearConditions();
            if (c !== false) {
                this.refresh();
                this._activateRootPredicate();
                this._fireQueryChange("clear")
            }
        },
        _fireQueryChange: function(c) {
            var d = this;
            var e = this.getQuery();
            e.fireChangedEvent({
                changeType: "query." + c
            })
        },
        _fireEntitiesPopup: function(d) {
            var c = this;
            if (this.options.entitiesPopupHandler) {
                return this.options.entitiesPopupHandler({
                    query: c.getQuery(),
                    items: d.items
                })
            } else {
                return false
            }
        },
        showEntitiesMenu: function(g, e) {
            var d = this;
            var c = d.options.entitiesMenu.PopupMenu("option", "items");
            var f = d._fireEntitiesPopup({
                items: c
            });
            if (f) {
                d.options.entitiesMenu.PopupMenu("refreshItems", c)
            }
            d.options.entitiesMenu.PopupMenu("showMenu", g)
        },
        getEntitiesList: function(d) {
            var c = this.getModel();
            var e = c.getEntitiesTree(d);
            if (this.options.entitiesListFilter) {
                this.options.entitiesListFilter(e, d)
            }
            return e
        },
        editConditionValue: function(i) {
            if (!i && !this.isQueryNullOrEmpty()) {
                i = this.getQuery().getRootPredicate().conditions[0]
            }
            if (!i) {
                return
            }
            var c = this.element.find("[class*=eqjs-qp-row-condition]").filter(function(j) {
                return (this.condition == i)
            });
            var h = c.find("[class*=eqjs-qp-valueelement]").first();
            if (h.length == 0) {
                return
            }
            var f = a(h).data();
            var d = "ValueEditor_";
            for (var g in f) {
                if (g.slice(0, d.length) == d) {
                    var e = f[g];
                    e.showEditor()
                }
            }
        },
        _createEntitiesMenu: function() {
            if (this.isModelNullOrEmpty()) {
                return null
            }
            var c = this;
            var e = a("<div></div>").hide().appendTo(c.element);
            var d = {
                items: c.options.entitiesList,
                adjustHeight: c.options.adjustEntitiesMenuHeight
            };
            a.extend(d, c.options.menuOptions);
            if (c.options.isSubQuery) {
                d.zIndex = c.options.dialogZIndex + 1000
            }
            e.PopupMenu(d);
            return e
        },
        addNewCondition: function(e, c) {
            var d = this;
            if (d._rootPredicateWidget) {
                d._rootPredicateWidget.addNewCondition(e, c)
            }
        },
        addNewConditionIntoActivePredicate: function(f, d) {
            var e = this;
            if (this._activeCondition) {
                var c;
                if (this._activeCondition.isPredicate()) {
                    c = this._activeCondition
                } else {
                    c = this._activeCondition._parentPredicateWidget
                }
                c.addNewCondition(f, d)
            } else {
                this.addNewCondition(f, d)
            }
        },
        refresh: function() {
            this._render();
            this._activateRootPredicate()
        },
        resize: function() {
            this._render()
        },
        setActiveCondition: function(c) {
            if (this._activeCondition) {
                this._activeCondition.deactivate()
            }
            this._activeCondition = c;
            if (this._activeCondition) {
                this._activeCondition.activate()
            }
        },
        predicateContainsCondition: function(c, g) {
            var d = this;
            if (!c || !g) {
                return false
            }
            if (c.conditions) {
                var f = c.conditions.length;
                for (var e = 0; e < f; e++) {
                    if (c.conditions[e] == g) {
                        return true
                    }
                    if (d.predicateContainsCondition(c.conditions[e], g)) {
                        return true
                    }
                }
            }
            return false
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.ValueEditor", {
        _expr: {
            value: "",
            text: ""
        },
        _linkElement: null,
        options: {
            model: null,
            conditionWidget: null,
            editor: null,
            onChange: null
        },
        getModel: function() {
            return this.options.conditionWidget ? this.options.conditionWidget.getModel() : null
        },
        getQuery: function() {
            return this.options.conditionWidget ? this.options.conditionWidget.getQuery() : null
        },
        getCondition: function() {
            return this.options.conditionWidget ? this.options.conditionWidget.getCondition() : null
        },
        getQueryPanel: function() {
            return this.options.conditionWidget ? this.options.conditionWidget.getQueryPanel() : null
        },
        init: function(c) {
            this._expr = c;
            this.refresh()
        },
        getResText: function() {
            if (!EQ.core.getText) {
                return b
            }
            return EQ.core.getText.apply(this.getQueryPanel(), arguments)
        },
        _getEmptyText: function() {
            return this.getResText("MsgEmptyScalarValue")
        },
        _render: function() {
            this.clear();
            if (this.getModel() && this._expr) {
                this._renderCommonPart();
                this._renderEditor();
                var c = this._getDisplayText();
                this._linkElement.text(c);
                this._linkElement.attr("title", c)
            }
        },
        _getClassesToAdd: function() {
            return "eqjs-qp-condelement eqjs-qp-valueelement"
        },
        _renderCommonPart: function() {
            var c = this;
            c.element.addClass(c._getClassesToAdd());
            var d = this.getCondition();
            if (d.enabled !== false && !d.readOnly) {
                c._linkElement = a("<a></a>", {
                    href: "javascript:void(0)",
                    text: "-"
                }).appendTo(c.element);
                c._linkElement.click(function() {
                    c._showEditor();
                    return false
                })
            } else {
                c._linkElement = a("<span></span>", {
                    text: "-"
                }).appendTo(c.element)
            }
        },
        showEditor: function() {
            this._showEditor();
            this.options.conditionWidget.makeActive()
        },
        _renderEditor: function() {},
        refresh: function() {
            this._render()
        },
        _showEditor: function() {},
        _setOption: function(c, d) {
            if (arguments.length == 2) {
                this.options[c] = d;
                this._render();
                return this
            } else {
                return this.options[c]
            }
        },
        clear: function() {
            if (this._linkElement) {
                this._linkElement.unbind()
            }
            this.element.removeClass();
            this.element.empty()
        },
        _setValueSilent: function(f) {
            var e = this._adjustNewValue(f);
            var d = this._validate(e);
            if (d && d.result) {
                this._expr.value = e;
                this._expr.text = f;
                this._adjustExprText();
                var c = this._getDisplayText();
                this._linkElement.text(c);
                this._linkElement.attr("title", c);
                return true
            } else {
                this._validateError(d)
            }
            return false
        },
        _setValue: function(c) {
            if (this._setValueSilent(c) && this.options.onChange) {
                this.options.onChange(this._expr.value)
            }
        },
        _validate: function(c) {
            return {
                result: true,
                message: ""
            }
        },
        _validateError: function(c) {
            alert("Invalid value!\n" + c.message)
        },
        _getValue: function() {
            return this._expr.value
        },
        _getText: function() {
            return this._expr.text
        },
        _isEmptyValue: function() {
            var c = this._getValue();
            return (typeof(c) === "undefined" || c === null || !c)
        },
        _adjustExprText: function() {
            if (this._expr.value && this._expr.value != "") {
                this._expr.text = this._expr.value
            } else {
                this._expr.text = ""
            }
        },
        _adjustNewValue: function(c) {
            return c
        },
        _getDisplayText: function() {
            this._adjustExprText();
            if (this._expr.text && this._expr.text != "") {
                return this._expr.text
            } else {
                if (this._expr.value && this._expr.value != "") {
                    return this._expr.value
                } else {
                    return this._getEmptyText()
                }
            }
        },
        destroy: function() {
            this.clear();
            a.Widget.prototype.destroy.call(this)
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.ValueEditor_EDIT", a.eqjs.ValueEditor, {
        _numberDecimalSeparatorValue: ".",
        _numberListSeparatorValue: ",",
        _numberDecimalSeparatorDisplay: ".",
        _numberListSeparators: [",", ";"],
        _editBox: null,
        _editBoxClass: "eqjs-qp-ve-editbox",
        _create: function() {
            var c = this.getQueryPanel();
            if (c) {
                if (c.options.numberDecimalSeparatorDisplay) {
                    this._numberDecimalSeparatorDisplay = c.options.numberDecimalSeparatorDisplay
                }
                if (c.options.numberListSeparators) {
                    this._numberListSeparators = c.options.numberListSeparators
                }
            }
        },
        _adjustNewValue: function(e) {
            if (e.length > 0 && this._expr.kind == "List") {
                var d = new RegExp("s*[" + this._numberListSeparators.join("") + "]s*", "i");
                var g = e.split(d);
                var f = g.length;
                for (var c = 0; c < f; c++) {
                    g[c] = this._adjustScalarValue(g[c])
                }
                return g.join(this._numberListSeparatorValue)
            } else {
                return this._adjustScalarValue(e)
            }
        },
        _adjustScalarValue: function(d) {
            var c = d.split(this._numberDecimalSeparatorDisplay).join(this._numberDecimalSeparatorValue);
            return c
        },
        _adjustExprText: function() {},
        _renderEditor: function() {
            var c = this;
            var d = false;
            c._editBox = a("<input />", {
                type: "text",
                "class": c._editBoxClass,
                blur: function(f) {
                    if (c._editBox.is(":visible") && !d) {
                        c._setValue(c._editBox.val());
                        c._editBox.hide();
                        c._linkElement.show();
                        f.stopPropagation();
                        return false
                    }
                },
                keydown: function(f) {
                    if (f.keyCode == 13) {
                        if (c._editBox.is(":visible")) {
                            d = true;
                            c._setValue(c._editBox.val());
                            c._editBox.hide();
                            c._linkElement.show();
                            f.stopPropagation();
                            d = false;
                            return false
                        }
                    }
                    if (f.keyCode == 27) {
                        c._editBox.hide();
                        c._linkElement.show();
                        f.stopPropagation();
                        return false
                    }
                }
            }).appendTo(this.element).hide()
        },
        _checkScalarValue: function(d) {
            var c = +d;
            if (isNaN(c)) {
                return {
                    result: false,
                    message: d + this.getResText("ErrNotNumber")
                }
            } else {
                if (EQ.core.isIntType(this._expr.dataType) && c != parseInt(d, 10)) {
                    return {
                        result: false,
                        message: d + " - " + this.getResText("ErrIncorrectInteger")
                    }
                }
            }
            return {
                result: true,
                message: ""
            }
        },
        _validate: function(f) {
            var d;
            if (EQ.core.isNumericType(this._expr.dataType)) {
                if (f.length > 0 && this._expr.kind == "List") {
                    var g = f.split(/\s*,\s*/);
                    var e = g.length;
                    for (var c = 0; c < e; c++) {
                        d = this._checkScalarValue(g[c]);
                        if (!d || !d.result) {
                            return {
                                result: false,
                                message: this.getResText("ErrIncorrectNumberList")
                            }
                        }
                    }
                    return {
                        result: true
                    }
                } else {
                    return this._checkScalarValue(f)
                }
            } else {
                return {
                    result: true
                }
            }
        },
        _getZIndex: function() {
            var c = this.getQueryPanel();
            return (c && c.options.isSubQuery) ? c.options.dialogZIndex + 1000 : 100000
        },
        _showEditor: function() {
            var c = this;
            c._linkElement.hide();
            c._editBox.val(c._getText()).css("min-width", c._linkElement.width()).show().focus()
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.ValueEditor_DATETIME", a.eqjs.ValueEditor_EDIT, {
        _dateFormatInternal: "yy-mm-dd",
        _dateFormatValue: "mm/dd/yy",
        _dateFormatDisplay: "d mm, yy",
        _dateValue: "",
        _timeFormatInternal: "hh:mm",
        _timeFormatValue: "hh:mm",
        _timeFormatDisplay: "hh:mm",
        _create: function() {
            var c = this.getQueryPanel();
            if (c) {
                if (c.options.dateFormatValue) {
                    this._dateFormatValue = c.options.dateFormatValue
                }
                if (c.options.dateFormatDisplay) {
                    this._dateFormatDisplay = c.options.dateFormatDisplay
                }
            }
        },
        _renderEditor: function() {
            var c = this;
            c._editBox = a("<input />", {
                type: "text",
                "class": "eqjs-qp-ve-editbox"
            }).appendTo(c.element).hide();
            if (c._expr.dataType == "Time") {
                c._editBox.TimePicker({
                    onChange: function(d) {
                        c._setValue(d);
                        c._editBox.hide()
                    }
                })
            } else {
                c._editBox.datepicker({
                    dateFormat: c._dateFormatValue,
                    changeMonth: true,
                    changeYear: true,
                    beforeShow: function() {
                        c._editBox.show()
                    },
                    onClose: function(f, e) {
                        if (f != "") {
                            var d = c._convertDate(a(this).datepicker("getDate"), c._dateFormatInternal);
                            if (c._expr.dataType == "Date") {
                                c._setValue(d);
                                c._editBox.hide()
                            } else {
                                c._timeEditBox.focus();
                                c._editBox.datepicker("hide");
                                c._dateValue = d;
                                c._setValue(d)
                            }
                        } else {
                            c._editBox.hide();
                            c._editBox.datepicker("hide");
                            if (c._timeEditBox) {
                                c._timeEditBox.focus()
                            }
                        }
                    }
                });
                if (c._expr.dataType == "DateTime") {
                    c._timeEditBox = a("<input />", {
                        type: "text",
                        "class": "eqjs-qp-ve-editbox-time"
                    }).appendTo(c.element).hide();
                    c._timeEditBox.TimePicker({
                        onChange: function(e) {
                            var d = c._dateValue;
                            if (d != null && d != "") {
                                d = d + " " + e
                            }
                            c._setValue(d);
                            c._editBox.hide();
                            c._timeEditBox.hide();
                            c._editBox.datepicker("hide")
                        }
                    })
                }
            }
        },
        _showEditor: function() {
            var d = this;
            if (d._expr.dataType == "Time") {
                var j = d._getValue();
                d._editBox.TimePicker("time", j)
            } else {
                var h = this._expr.value.split(" ");
                var g = this._expr.value;
                if (h.length > 1) {
                    g = h[0]
                }
                d._editBox.val(this._convertDateString(g, this._dateFormatInternal, this._dateFormatValue))
            }
            var i = this.getQueryPanel();
            var f = (i && i.options.isSubQuery) ? i.options.dialogZIndex + 1000 : 100000;
            var c = d._linkElement.position().left;
            var e = d._linkElement.position().top;
            d._editBox.css({
                left: c,
                top: e,
                width: "115px",
                position: "absolute",
                zIndex: f
            }).show().focus();
            if (d._timeEditBox) {
                d._timeEditBox.css({
                    left: d._linkElement.position().left + 120,
                    top: d._linkElement.position().top,
                    width: "60px",
                    position: "absolute",
                    zIndex: f
                }).show()
            }
        },
        _adjustExprText: function() {
            if (this._expr.value && this._expr.value != "") {
                if (this._expr.dataType == "Date") {
                    this._expr.text = this._convertDateString(this._expr.value, this._dateFormatInternal, this._dateFormatDisplay)
                } else {
                    if (this._expr.dataType == "DateTime") {
                        var e = this._expr.value.split(" ");
                        var c = this._expr.value;
                        var d = "";
                        if (e.length > 1) {
                            c = e[0];
                            d = " " + e[1]
                        }
                        this._expr.text = this._convertDateString(c, this._dateFormatInternal, this._dateFormatDisplay) + d
                    } else {
                        if (this._expr.dataType == "Time") {
                            this._expr.text = this._expr.value
                        }
                    }
                }
            } else {
                this._expr.text = ""
            }
        },
        _validate: function(c) {
            return {
                result: true,
                message: ""
            }
        },
        _convertDateString: function(d, f, e) {
            var c = a.datepicker.parseDate(f, d);
            return this._convertDate(c, e)
        },
        _convertDate: function(c, d) {
            return a.datepicker.formatDate(d, c)
        },
        _convertTimeString: function(c, e, d) {
            return c
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.ValueEditor_LIST", a.eqjs.ValueEditor, {
        _menuBlock: null,
        _menuItemsList: null,
        _emptyListText: "<empty list>",
        _getEmptyText: function() {
            if (this._menuItemsList && (this._menuItemsList.length > 0)) {
                return this.getResText("MsgEmptyListValue")
            } else {
                return this._emptyListText
            }
        },
        _renderEditor: function() {
            var c = this;
            c._fillMenuItemsList();
            c._renderMenuBlock()
        },
        _renderMenuBlock: function() {
            var c = this;
            var f = false;
            if (this._expr) {
                f = this._expr.kind == "List"
            }
            var e = this.getQueryPanel();
            var d = {
                items: c._menuItemsList,
                multiselect: f,
                onMenuItemSelected: function(g, l) {
                    if (!f) {
                        c._setValue(l.menuItem.id)
                    } else {
                        if (l.selectedItems) {
                            var h = [];
                            var k = l.selectedItems.length;
                            for (var j = 0; j < k; j++) {
                                h.push(l.selectedItems[j].id)
                            }
                            c._setValue(h.join(","))
                        }
                    }
                    return false
                }
            };
            a.extend(d, e.options.menuOptions);
            if (e.options.isSubQuery) {
                d.zIndex = e.options.dialogZIndex + 1000
            }
            c._menuBlock = a("<div></div>").hide().appendTo(c.element).PopupMenu(d)
        },
        _showEditor: function() {
            var c = this;
            c._menuBlock.PopupMenu("showMenu", {
                anchor: c._linkElement
            })
        },
        _adjustExprText: function() {
            var e = this;
            var g, d = [],
                f;
            if (e._expr.value && e._menuItemsList) {
                if (this._expr.kind == "List") {
                    g = e._expr.value.split(",")
                } else {
                    g = [e._expr.value]
                }
                e._expr.text = "";
                var h = g.length;
                for (var c = 0; c < h; c++) {
                    f = a.grep(e._menuItemsList, function(i) {
                        return (g[c] == i.id)
                    });
                    if (f.length > 0) {
                        d.push(f[0].text)
                    }
                }
                e._expr.text = d.join(",")
            } else {
                e._expr.text = ""
            }
        },
        _takeFirstItemInList: function() {
            if (this._menuItemsList && this._menuItemsList.length > 0) {
                this._setValueSilent(this._menuItemsList[0].id)
            }
        },
        _takeDefaultValue: function() {
            if (!this._menuItemsList) {
                return
            }
            var e = this._menuItemsList.length;
            for (var c = 0; c < e; c++) {
                var d = this._menuItemsList[c];
                if (d.isDefault) {
                    this._setValueSilent(d.id);
                    break
                }
            }
        },
        _fillMenuItemsList: function() {
            this._menuItemsList = this.options.editor.values.value
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.ValueEditor_CUSTOMLIST", a.eqjs.ValueEditor_LIST, {
        _loaderElement: null,
        _renderEditor: function() {
            var c = this;
            c._linkElement.hide();
            c._loaderElement = a("<div></div>", {
                "class": "eqjs-qp-ve-loader"
            }).appendTo(c.element);
            c._fillMenuItemsList(function() {
                var d = c._getDisplayText();
                c._linkElement.text(d);
                c._linkElement.attr("title", d);
                c._loaderElement.hide();
                c._linkElement.show();
                c._renderMenuBlock();
                if (c._isEmptyValue()) {
                    c._takeDefaultValue()
                }
            })
        },
        _fillMenuItemsList: function(g) {
            var d = this,
                e = this.options.editor.name,
                c = this.getQuery().getListRequestHandler();
            var f = this.getQueryPanel();
            if (EQ.core.constLists[e]) {
                d._menuItemsList = EQ.core.constLists[e];
                if (g) {
                    g()
                }
            } else {
                if (e === "EntityTree") {
                    d._menuItemsList = f.options.entitiesList;
                    if (g) {
                        g()
                    }
                } else {
                    if (c) {
                        c({
                            listName: e
                        }, function(h) {
                            d._menuItemsList = h;
                            if (g) {
                                g()
                            }
                        })
                    }
                }
            }
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.ValueEditor_SQLLIST", a.eqjs.ValueEditor_CUSTOMLIST, {
        _fillMenuItemsList: function(f) {
            var d = this;
            var e = this.getQuery();
            var c = e.getListRequestHandler();
            if (c) {
                c({
                    listName: "SQL",
                    sql: d.options.editor.sql
                }, function(g) {
                    d._menuItemsList = g;
                    if (f) {
                        f()
                    }
                })
            }
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.ValueEditor_SUBQUERY", a.eqjs.ValueEditor, {
        _dialogBlock: null,
        _queryPanelBlock: null,
        _columnElement: null,
        _getEmptyText: function() {
            return this.getResText("MsgSubQueryValue")
        },
        _renderEditor: function() {
            var h = this;
            h._dialogBlock = a("<div></div>", {
                "class": "eqjs-qp-ve-subquery"
            }).hide().appendTo(h.element);
            var f = this.getQueryPanel();
            var g = f.getEntitiesList({
                addUIC: false,
                addUIR: true,
                addUIS: false,
                isSubQuery: true
            });
            var j = a("<div></div>").hide().appendTo(h._dialogBlock);
            j.PopupMenu({
                items: g,
                zIndex: f.options.dialogZIndex + 1000
            });
            var e = a("<div></div>").addClass("eqjs-qp-ve-subquery-column").appendTo(h._dialogBlock);
            var d = a("<div></div>").addClass("eqjs-qp-ve-subquery-column-title").text(h.getResText("SubQueryColumnTitle")).appendTo(e);
            var c = a("<div></div>").addClass("eqjs-qp-ve-subquery-column-element").appendTo(e);
            h._columnElement = a("<a></a>").attr("href", "javascript:void(0)").appendTo(c);
            h._columnElement.click(function(k) {
                j.PopupMenu("showMenu", {
                    anchor: h._columnElement,
                    selectedIds: null,
                    itemSelectedCallback: function(l, m) {
                        return h._columnElementMenuClick(l, m)
                    }
                })
            });
            var i = a("<div></div>").addClass("eqjs-qp-ve-subquery-qp-caption").text(h.getResText("SubQueryQueryPanelCaption")).appendTo(h._dialogBlock);
            h._queryPanelBlock = a('<div class="eqjs-qp-ve-subquery-qp"></div>').appendTo(h._dialogBlock);
            h._dialogBlock.dialog({
                autoOpen: false,
                draggable: false,
                resizable: false,
                title: h.getResText("SubQueryDialogTitle"),
                dialogClass: "eq-js-dialog",
                closeText: "X",
                modal: true,
                width: f.options.subQueryDialogWidth,
                minHeight: f.options.subQueryDialogHeight,
                zIndex: f.options.dialogZIndex,
                buttons: [{
                    name: "eqjs-subquery-button-ok",
                    text: h.getResText("ButtonOK"),
                    click: function() {
                        var l = h.getSubQuery();
                        h._expr.value = l.getObject();
                        a(this).dialog("close");
                        var k = h.getQuery();
                        k.fireChangedEvent({
                            changeType: "condition.changed",
                            condition: h.getCondition()
                        })
                    }
                }, {
                    name: "eqjs-subquery-button-cancel",
                    text: h.getResText("ButtonCancel"),
                    click: function() {
                        a(this).dialog("close")
                    }
                }],
                open: function() {
                    a(".ui-widget-overlay").addClass("eq-js-dialog-overlay");
                    a("body").css("overflow", "hidden")
                },
                beforeClose: function() {
                    a(".ui-widget-overlay").removeClass("eq-js-dialog-overlay");
                    a("body").css("overflow", "auto")
                },
                close: function(k, l) {
                    h._queryPanelBlock.QueryPanel("destroy")
                }
            })
        },
        _columnElementMenuClick: function(c, i) {
            var d = this;
            var g = i.menuItem.data("id");
            var f = d.getModel().getAttributeById(g);
            var h = this.getSubQuery();
            var e = {
                caption: "",
                sorting: "None",
                sortIndex: -1,
                expr: {
                    typeName: "ENTATTR",
                    id: g
                }
            };
            var j = h.getColumns();
            if (j.length > 0) {
                j[0] = e
            } else {
                j.push(e)
            }
            d._columnElement.text(d._getAttributeText(f));
            d._okButtonEnable(true);
            return false
        },
        _getAttributeText: function(f) {
            var e = this;
            if (!f) {
                return e.getResText("SubQueryEmptyColumn")
            }
            var i = EQ.core.getText("Attributes", f.id);
            if (!i) {
                i = f.caption
            }
            var d = this.getQueryPanel();
            var g = d.options.attrElementFormat;
            if (!g) {
                return i
            }
            var c = g.replace(new RegExp("{attr}", "g"), i);
            var h = e.getModel().getFullEntityPathByAttr(f.id, ".");
            c = c.replace(new RegExp("{entity}", "g"), h);
            return c
        },
        _showEditor: function() {
            var d = this;
            var c = this.getQueryPanel();
            d._queryPanelBlock.empty();
            var g = new EQ.core.Query(this.getModel(), d._expr.value);
            d._queryPanelBlock.QueryPanel({
                isSubQuery: true,
                showRootRow: c.options.showRootRow,
                showAddRow: true,
                showCheckboxes: c.options.showCheckboxes,
                dateFormatValue: c.options.dateFormatValue,
                dateFormatDisplay: c.options.dateFormatDisplay,
                listRequestHandler: c.options.listRequestHandler,
                sqlListRequestHandler: c.options.sqlListRequestHandler,
                entitiesListFilter: function(j, i) {
                    if (c.options.entitiesListFilter) {
                        var k = i || {};
                        k.isSubQuery = true;
                        c.options.entitiesListFilter(j, k)
                    }
                }
            });
            d._queryPanelBlock.QueryPanel("setQuery", g);
            var h = g.getColumns();
            var f = -1;
            if (h.length > 0) {
                f = h[0].expr.id
            }
            var e = (f == -1) ? null : d.getModel().getAttributeById(f);
            d._columnElement.text(d._getAttributeText(e));
            d._dialogBlock.dialog("open");
            d._okButtonEnable(e)
        },
        getSubQuery: function() {
            return this._queryPanelBlock.QueryPanel("getQuery")
        },
        _okButtonEnable: function(c) {
            var d = this._dialogBlock.next(".ui-dialog-buttonpane").find("[name='eqjs-subquery-button-ok']");
            if (d) {
                if (c) {
                    d.button("enable")
                } else {
                    d.button("disable")
                }
            }
        },
        _getDisplayText: function() {
            return this._getEmptyText()
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.PredicateLinkType", a.eqjs.ValueEditor_LIST, {
        _predicate: null,
        options: {
            queryPanel: null,
        },
        getCondition: function() {
            return this._predicate
        },
        init: function(c) {
            this._predicate = c;
            this.refresh()
        },
        _render: function() {
            this.clear();
            if (this._predicate) {
                this._renderCommonPart();
                if (this._predicate.enabled !== false) {
                    this._renderEditor()
                }
                this._linkElement.text(this._getDisplayText())
            }
        },
        _showEditor: function() {
            var c = this;
            c._menuBlock.PopupMenu("showMenu", {
                anchor: c._linkElement
            })
        },
        _fillMenuItemsList: function() {
            this._menuItemsList = EQ.core.predicateLinkTypeList
        },
        _setValue: function(c) {
            this._predicate.linkType = c;
            this._linkElement.text(this._getDisplayText());
            if (this.options.onChange) {
                this.options.onChange(c)
            }
        },
        _getClassesToAdd: function() {
            return "eqjs-qp-predelement eqjs-qp-predvalueelement"
        },
        _getDisplayText: function() {
            var d = this,
                c = this._getEmptyText();
            if (d._predicate.linkType && d._predicate.linkType != "") {
                a.each(EQ.core.predicateLinkTypeList, function() {
                    if (this.id === d._predicate.linkType) {
                        c = this.text
                    }
                })
            }
            return c
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.ColumnsPanel", {
        _activeColumn: null,
        _defaultMenuOptions: {
            showSearchBoxAfter: 30,
            activateOnMouseOver: true
        },
        _query: null,
        options: {
            isSubQuery: false,
            showAddRow: true,
            showHeader: true,
            showColumnCaptions: true,
            allowAggrColumns: true,
            allowSorting: true,
            adjustEntitiesMenuHeight: true,
            attrElementFormat: "{entity} {attr}",
            alwaysShowButtons: false,
            accentActiveColumn: true,
            menuSearchBoxAfter: 30,
            menuOptions: {
                showSearchBoxAfter: 30,
                activateOnMouseOver: true,
                adjustHeight: true
            }
        },
        _create: function() {},
        getQuery: function() {
            return this._query
        },
        setQuery: function(c) {
            this._query = c;
            this.refresh()
        },
        getModel: function() {
            var c = this.getQuery();
            return c ? c.getModel() : null
        },
        getColumns: function() {
            var c = this.getQuery();
            return c ? c.getColumns() : null
        },
        _render: function() {
            var l = this;
            l._clear();
            var i = this.getModel();
            l._updateLists();
            if (i && !i.isEmpty()) {
                l.options.entitiesList = i.getEntitiesTree({
                    addUIC: false,
                    addUIR: true,
                    addUIS: false
                });
                l.options.entitiesMenu = l._createEntitiesMenu();
                if (l.options.allowSorting != false) {
                    l.options.sortMenuList = [{
                        id: "None",
                        text: EQ.core.getText("CmdNotSorted")
                    }, {
                        id: "Ascending",
                        text: EQ.core.getText("CmdAscending")
                    }, {
                        id: "Descending",
                        text: EQ.core.getText("CmdDescending")
                    }, {
                        id: "---",
                        text: "---"
                    }, {
                        id: "MoveTop",
                        text: "Move to the top"
                    }, {
                        id: "MoveUp",
                        text: "Move up"
                    }, {
                        id: "MoveDown",
                        text: "Move down"
                    }, {
                        id: "MoveBottom",
                        text: "Move to the bottom"
                    }];
                    l.options.sortMenu = l._createSortMenu()
                } else {
                    l.options.sortMenu = null
                }
                var k = 0;
                var g = l.getColumns();
                if (l.options.showHeader != false && g && g.length > 0) {
                    var f = a('<div class="eqjs-qc-header"></div>').appendTo(this.element);
                    var e = a('<div class="eqjs-qc-header-expression"></div>').text(EQ.core.getText("HeaderExpression")).appendTo(f);
                    if (l.options.showColumnCaptions) {
                        var c = a('<div class="eqjs-qc-header-title"></div>').text(EQ.core.getText("HeaderTitle")).appendTo(f)
                    }
                    k += f.outerHeight() + 5
                }
                var j = l._refreshByQuery();
                if (l.options.showAddRow) {
                    var d = a('<div class="eqjs-qc-addrow"></div>');
                    d.appendTo(this.element);
                    if (!g || g.length === 0) {
                        d.addClass("eqjs-qc-addrow-empty")
                    }
                    var h = a('<a href="javascript:void(0)">' + EQ.core.getText("CmdClickToAddColumn") + "</a>");
                    h.appendTo(d);
                    h.click(function(m) {
                        l.showEntitiesMenu({
                            anchor: h,
                            selectedIds: null,
                            itemSelectedCallback: function(n, r) {
                                var q = r.menuItem.id;
                                var o = i.getAttributeById(q);
                                l.addNewColumn(q);
                                return false
                            }
                        }, {})
                    });
                    k += d.outerHeight() + 9
                }
                if (j) {
                    j.css({
                        "max-height": l.element.innerHeight() - k + "px"
                    })
                }
            }
        },
        _updateLists: function() {},
        _setOption: function(c, d) {
            if (c == "menuOptions") {
                this.options.menuOptions = a.extend({}, this._defaultMenuOptions, d)
            } else {
                if (c == "searchBoxAfter") {
                    this.options[c] = d;
                    this.options.menuOptions.showSearchBoxAfter = d
                } else {
                    if (c == "query") {
                        this.setQuery(d)
                    } else {
                        if (arguments.length == 2) {
                            this.options[c] = d;
                            this.refresh();
                            return this
                        } else {
                            return this.options[c]
                        }
                    }
                }
            }
        },
        _clear: function() {
            this.element.html("")
        },
        _refreshByQuery: function() {
            var s = this;
            if (!this.getQuery()) {
                return
            }
            var g = a("<div></div>"),
                h = a("<div></div>");
            g.addClass("eqjs-qc-columns");
            g.appendTo(h);
            h.appendTo(s.element);
            var i = s.getColumns();
            var r = i.length;
            for (var k = 0; k < r; k++) {
                var n = a("<div></div>");
                n.appendTo(g);
                var f = "element.ColumnRow_" + i[k].expr.typeName + "({columnsPanel: self}); element.ColumnRow_" + i[k].expr.typeName + "('init', self.getColumns()[idx]);";
                var d = new Function("self, element, idx", f);
                d(s, n, k)
            }
            var j, q, c, e = false,
                m, o = false;
            var l = s.getModel();
            g.sortable({
                containment: h,
                tolerance: "touch",
                cancel: ".eqjs-qc-column-buttonsBlock, .eqjs-qc-colelement, .eqjs-qc-sortbutton",
                placeholder: "ui-state-highlight eqjs-highlight",
                scrollSpeed: 3,
                delay: 100,
                distance: 13,
                cursorAt: {
                    top: 10
                },
                forceHelperSize: true,
                start: function(t, u) {
                    j = u.item.index();
                    u.item.addClass("eqjs-qc-column-sort");
                    o = true
                },
                update: function(v, w) {
                    var u = w.item.attr("data-id");
                    if (u) {
                        var t = l.getAttributeById(u);
                        if (t.UIR != true) {
                            w.item.remove();
                            return
                        }
                    }
                    q = w.item.index();
                    if (e) {
                        s.addNewColumn(m, q);
                        e = false
                    } else {
                        if (j != q) {
                            s.getQuery().moveColumn(j, q);
                            s._fireQueryChange("columns.order")
                        }
                    }
                },
                stop: function(t, u) {
                    u.item.removeClass("eqjs-qc-column-sort")
                }
            });
            s.element.droppable({
                hoverClass: "eqjs-drophover",
                scope: "entityAttr",
                drop: function(t, v) {
                    var u = v.draggable.attr("data-id");
                    if (!l.checkAttrProperty(u, "UIR")) {
                        return
                    }
                    if (!i || i.length === 0 || !o) {
                        s.addNewColumn(u)
                    } else {
                        e = true
                    }
                },
                over: function(t, v) {
                    v.helper.addClass("eqjs-qc-column-drag");
                    var u = v.draggable.attr("data-id");
                    if (!l.checkAttrProperty(u, "UIR")) {
                        v.helper.addClass("eqjs-qc-column-drag-forbidden")
                    }
                },
                out: function(t, u) {
                    u.helper.removeClass("eqjs-qc-column-drag");
                    u.helper.removeClass("eqjs-qc-column-drag-forbidden")
                },
                activate: function(t, u) {
                    m = u.draggable.attr("data-id")
                }
            });
            (!g.children().length) ? h.hide() : h.show();
            return g
        },
        clearColumns: function(c) {
            var d = this.getQuery();
            if (!d) {
                return
            }
            d.clearColumns();
            if (c !== false) {
                this.refresh()
            }
        },
        _createEntitiesMenu: function() {
            var e = this.getModel();
            if (!e || e.isEmpty()) {
                return null
            }
            var c = this;
            var f = a("<div></div>").hide().appendTo(this.element);
            var d = {
                items: this.options.entitiesList,
                adjustHeight: c.options.adjustEntitiesMenuHeight
            };
            a.extend(d, c.options.menuOptions);
            f.PopupMenu(d);
            return f
        },
        showEntitiesMenu: function(e, d) {
            var c = this;
            c.options.entitiesMenu.PopupMenu("showMenu", e)
        },
        _createSortMenu: function() {
            var d = this.getModel();
            if (!d || d.isEmpty()) {
                return null
            }
            var e = a("<div></div>").hide().appendTo(this.element);
            var c = this;
            e.PopupMenu({
                items: this.options.sortMenuList
            });
            return e
        },
        _fireQueryChange: function(c) {
            var d = this;
            this.getQuery().fireChangedEvent({
                changeType: "query." + c
            })
        },
        _fireColumnChange: function(c, e) {
            var d = this;
            e = e || d._column;
            this.getQuery().fireChangedEvent({
                changeType: "column." + c,
                column: e
            })
        },
        addNewColumn: function(f, j) {
            var l = this;
            var h = this.getModel();
            var k = function(i) {
                var m = h.getAttributeById(i);
                if (!m) {
                    return null
                }
                if (!m.UIR) {
                    if (m.lookupAttr) {
                        i = m.lookupAttr;
                        m = h.getAttributeById(i);
                        if (!m || !m.UIR) {
                            return null
                        }
                    } else {
                        return null
                    }
                }
                return {
                    caption: "",
                    sorting: "None",
                    sortIndex: -1,
                    expr: {
                        typeName: "ENTATTR",
                        id: i
                    }
                }
            };
            if (!this.getQuery()) {
                return
            }
            var d, c;
            if (a.isArray(f)) {
                d = [];
                var e = f.length;
                for (var g = 0; g < e; g++) {
                    c = k(f[g]);
                    if (c) {
                        d.push(c)
                    }
                }
            } else {
                d = k(f)
            }
            l.addColumn(d, j);
            return d
        },
        addColumn: function(e, d) {
            var c = this;
            var f = this.getQuery();
            if (!f) {
                return
            }
            if (!e || (a.isArray(e) && e.length == 0)) {
                return
            }
            f.addColumn(e, d);
            c.refresh();
            c._fireColumnChange("add", e)
        },
        removeColumn: function(f) {
            var c = this;
            var g = this.getQuery();
            if (!g) {
                return
            }
            var e = g.getColumns();
            var d = a.inArray(f, e);
            if (d >= 0) {
                e.splice(d, 1);
                c.refresh();
                c._fireColumnChange("remove", f)
            }
        },
        removeColumnByAttrId: function(i) {
            var c = this;
            var h = this.getQuery();
            if (!h) {
                return
            }
            var e = 0;
            var f = h.getColumns();
            var g = f.length;
            while (e < g) {
                var d = f[e];
                if (d.expr.typeName == "ENTATTR" && d.expr.id == i) {
                    break
                }
                e++
            }
            if (e < g) {
                f.splice(e, 1);
                c._fireColumnChange("remove", d);
                c.refresh()
            }
        },
        moveColumn: function(c, k) {
            var l = this;
            var j = this.getQuery();
            var d = j.getColumns();
            var g = a.inArray(c, d);
            var f = this.element.find("[class*=eqjs-qc-row-column]").filter(function(m) {
                return (this.column == c)
            });
            var h = f.parent();
            if (g >= 0) {
                switch (k) {
                    case "MoveTop":
                        if (g == 0) {
                            return
                        }
                        j.moveColumn(g, 0);
                        f.detach();
                        h.prepend(f);
                        break;
                    case "MoveUp":
                        if (g == 0) {
                            return
                        }
                        j.moveColumn(g, g - 1);
                        var i = f.prev();
                        f.detach();
                        i.before(f);
                        break;
                    case "MoveDown":
                        if (g == d.length - 1) {
                            return
                        }
                        j.moveColumn(g, g + 1);
                        var e = f.next();
                        f.detach();
                        e.after(f);
                        break;
                    case "MoveBottom":
                        if (g == d.length - 1) {
                            return
                        }
                        j.moveColumn(g, length - 1);
                        f.detach();
                        h.append(f);
                        break
                }
                l._fireQueryChange("columns.order")
            }
        },
        refresh: function() {
            this._render()
        },
        resize: function() {
            this._render()
        },
        setActiveColumn: function(c) {
            if (this._activeColumn) {
                this._activeColumn.deactivate()
            }
            this._activeColumn = c;
            if (this._activeColumn) {
                this._activeColumn.activate()
            }
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.ColumnRow", {
        _column: null,
        _buttonsBlock: null,
        _columnTypeButton: null,
        _deleteButton: null,
        _keepShowingButtons: false,
        _isMouseOverBlock: false,
        _sortingButton: null,
        _classesToAdd: "",
        _active: false,
        options: {
            columnsPanel: null
        },
        getQuery: function() {
            return this.options.columnsPanel ? this.options.columnsPanel.getQuery() : null
        },
        getModel: function() {
            var c = this.getQuery();
            return c ? c.getModel() : null
        },
        isModelNullOrEmpty: function() {
            var c = this.getModel();
            return !c || c.isEmpty()
        },
        init: function(c) {
            this._column = c;
            this.element.get(0).column = c;
            this.refresh()
        },
        _render: function() {
            this._clear();
            if (!this.isModelNullOrEmpty() && this._column) {
                this._refreshByColumn();
                this._initButtons()
            }
        },
        _fireColumnChange: function(c, e) {
            var d = this;
            e = e || d._column;
            var f = this.getQuery();
            f.fireChangedEvent({
                changeType: "column." + c,
                column: e
            })
        },
        refresh: function() {
            this._render()
        },
        _setOption: function(c, d) {
            if (arguments.length == 2) {
                this.options[c] = d;
                if (c === "disabled") {
                    this._column.enabled = !d
                }
                this._render();
                return this
            } else {
                if (c === "disabled") {
                    return this._column.enabled === false
                } else {
                    return this.options[c]
                }
            }
        },
        _clear: function() {
            this.element.unbind();
            this.element.html("");
            this.element.removeClass()
        },
        _refreshByColumn: function() {},
        remove: function() {
            var c = this;
            if (!c.options.columnsPanel) {
                return
            }
            c.options.columnsPanel.removeColumn(c._column);
            c._fireColumnChange("delete")
        },
        destroy: function() {
            a.Widget.prototype.destroy.call(this)
        },
        _getButtonsContainer: function() {
            return this.element
        },
        _initButtons: function() {
            var d = this;
            d._sortingButton = a("<div></div>").addClass("eqjs-qc-colelement eqjs-qc-sortbutton").prependTo(d.element);
            var c = d._getButtonsContainer();
            if (!c || d._column.readOnly) {
                return
            }
            d._buttonsBlock = a("<div></div>").addClass("eqjs-qc-column-buttonsBlock").appendTo(c);
            d._columnTypeButton = a("<div></div>").addClass("eqjs-qc-column-button eqjs-qc-column-button-type").attr("title", EQ.core.getText("ButtonToAggr")).appendTo(d._buttonsBlock);
            d._deleteButton = a("<div></div>").addClass("eqjs-qc-column-button eqjs-qc-column-button-delete").attr("title", EQ.core.getText("ButtonDelete")).appendTo(d._buttonsBlock).click(function() {
                d.remove()
            });
            if (d.options.columnsPanel.options.allowSorting != false) {
                d._sortingButton.attr("title", EQ.core.getText("ButtonSorting")).click(function() {
                    d._keepShowingButtons = true;
                    d.options.columnsPanel.options.sortMenu.PopupMenu("showMenu", {
                        anchor: d._sortingButton,
                        selectedIds: null,
                        itemSelectedCallback: function(e, f) {
                            if (f.menuItem.id == "None" || f.menuItem.id == "Ascending" || f.menuItem.id == "Descending") {
                                d._column.sorting = f.menuItem.id;
                                d.refresh();
                                d._fireColumnChange("change")
                            } else {
                                d.options.columnsPanel.moveColumn(d._column, f.menuItem.id)
                            }
                        },
                        menuClosedCallback: function() {
                            d._keepShowingButtons = false;
                            if (!d._isMouseOverBlock) {
                                d._sortingButton.trigger("mouseleave")
                            }
                        }
                    })
                });
                if (d._column.sorting === "None") {
                    d._sortingButton.addClass("eqjs-qc-sortbutton-none")
                }
                d._sortingButton.hover(function() {
                    a(this).addClass("eqjs-qc-sortbutton-active")
                }, function() {
                    a(this).removeClass("eqjs-qc-sortbutton-active")
                })
            }
            if (d._column.sorting === "Ascending") {
                d._sortingButton.addClass("eqjs-qc-sortbutton-asc").attr("title", EQ.core.getText("ButtonSorting"))
            } else {
                if (d._column.sorting === "Descending") {
                    d._sortingButton.addClass("eqjs-qc-sortbutton-desc").attr("title", EQ.core.getText("ButtonSorting"))
                }
            }
            c.find("[class*=eqjs-qc-column-button]").hover(function() {
                a(this).addClass("eqjs-qc-column-button-active")
            }, function() {
                a(this).removeClass("eqjs-qc-column-button-active")
            });
            c.bind("mouseenter", function(e) {
                d._isMouseOverBlock = true;
                d._enterButtonBlock();
                e.stopPropagation();
                return false
            }).bind("mouseleave", function(e) {
                d._isMouseOverBlock = false;
                if (!d._keepShowingButtons) {
                    d._leaveButtonBlock()
                }
                e.stopPropagation();
                return false
            });
            d._setupButtonListeners();
            d._hideButtons();
            d._adjustButtonsVisibility()
        },
        _setupButtonListeners: function() {},
        _adjustButtonsVisibility: function() {},
        _enterButtonBlock: function() {
            this._showButtons()
        },
        _leaveButtonBlock: function() {
            if (this.options.columnsPanel.options.alwaysShowButtons != true && (!this._active || this.options.columnsPanel.options.accentActiveColumn != true)) {
                this._hideButtons()
            }
        },
        _showButtons: function() {},
        _hideButtons: function() {
            this._columnTypeButton.css("background-image", "none");
            this._deleteButton.css("background-image", "none");
            if (this._column.sorting === "None") {
                this._sortingButton.css("background-image", "none")
            }
        },
        activate: function() {
            this._active = true;
            this.adjustActiveClass();
            this._hideButtons();
            this._adjustButtonsVisibility()
        },
        deactivate: function() {
            this._active = false;
            this.adjustActiveClass();
            this._hideButtons();
            this._adjustButtonsVisibility()
        },
        adjustActiveClass: function() {
            if (this._active) {
                this.element.addClass("active")
            } else {
                this.element.removeClass("active")
            }
        },
        isActive: function() {
            return this._active
        },
        setActiveColumn: function() {
            this.options.columnsPanel.setActiveColumn(this)
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.ColumnRow_ENTATTR", a.eqjs.ColumnRow, {
        _classesToAdd: "eqjs-qc-row eqjs-qc-row-column-entattr",
        _baseAttr: null,
        _menuFunctionsBlock: null,
        _baseExprMenuClick: function(c, g) {
            var d = this;
            var f = g.menuItem.data("id");
            var e = d.getModel().getAttributeById(f);
            d._column.expr.id = f;
            d._column.caption = "";
            d.refresh();
            d._fireColumnChange("change");
            return false
        },
        _getBaseExpr: function() {
            var c = this;
            var d = null;
            if (c._column.enabled !== false && !c._column.readOnly) {
                d = a("<a></a>").attr("href", "javascript:void(0)").text(c._getAttributeText(c._baseAttr)).click(function(f) {
                    c.options.columnsPanel.options.entitiesMenu.PopupMenu("showMenu", {
                        anchor: d,
                        selectedIds: null,
                        itemSelectedCallback: function(e, g) {
                            return c._baseExprMenuClick(e, g)
                        }
                    })
                })
            } else {
                d = a("<span></span>").text(c._getAttributeText(c._baseAttr))
            }
            return d
        },
        _fillBaseBlock: function(e) {
            var d = this;
            e.addClass("eqjs-qc-expr-block");
            var c = a("<div></div>").addClass("eqjs-qc-colelement eqjs-qc-attrelement").appendTo(e);
            var f = d._getBaseExpr();
            f.appendTo(c);
            if (!d._column.readOnly) {
                d._createFunctionMenu()
            }
        },
        _refreshByColumn: function() {
            if (!this._column || this.isModelNullOrEmpty()) {
                return
            }
            var c = this;
            c._baseAttr = c._getAttribute();
            c.element.addClass(c._classesToAdd);
            if (c._column.readOnly) {
                this.element.addClass("eqjs-qp-readonly")
            }
            var f = a("<div></div>").appendTo(c.element);
            c._fillBaseBlock(f);
            if (c.options.columnsPanel.options.accentActiveColumn) {
                c.element.click(function() {
                    if (!c._active) {
                        c.setActiveColumn()
                    }
                })
            }
            if (c.options.columnsPanel.options.showColumnCaptions) {
                if (!c._column.caption || c._column.caption == "") {
                    c._column.caption = c._getDefaultCaption()
                }
                if (!c._column.readOnly) {
                    var e = a("<div></div>");
                    e.appendTo(this.element);
                    var g = function() {
                        c._fireColumnChange("change")
                    };
                    e.ColumnRow_CaptionEditor();
                    e.ColumnRow_CaptionEditor("init", c._column, c._getDefaultCaption(), g)
                } else {
                    var d = a("<span></span>").addClass("eqjs-qc-colelement eqjs-qc-captionelement").text(c._getDefaultCaption()).appendTo(this.element)
                }
            }
            c.adjustActiveClass()
        },
        _getDefaultCaption: function() {
            return this._getAttributeText(this._baseAttr)
        },
        _getAttribute: function() {
            return this.getModel().getAttributeById(this._column.expr.id)
        },
        _getAttributeText: function(c) {
            var d = this;
            if (!c) {
                return ""
            }
            var e = this.getModel();
            var f = d.options.columnsPanel.options.attrElementFormat;
            return e.getAttributeText(c, f)
        },
        _adjustButtonsVisibility: function() {
            var c = this;
            c._columnTypeButton.removeClass("aggregated").attr("title", EQ.core.getText("ButtonToAggr"));
            if (this.options.columnsPanel.options.alwaysShowButtons || (this.options.columnsPanel.options.accentActiveColumn && this._active)) {
                this._showButtons()
            }
        },
        _changeTypeToAggr: function(f) {
            var c = this;
            if (!f) {
                f = c._menuFunctionsBlock.PopupMenu("option", "items")[0].id
            }
            var g = c._column.expr.id;
            c._column.caption = "";
            c._column.expr = {
                func: f,
                distinct: false,
                typeName: "AGGRFUNC",
                argument: {
                    typeName: "ENTATTR",
                    id: g
                }
            };
            var e = c._column;
            var d = c._active;
            c.destroy();
            c._clear();
            c.element.ColumnRow_AGGRFUNC({
                columnsPanel: c.options.columnsPanel
            });
            c.element.ColumnRow_AGGRFUNC("init", e);
            c._fireColumnChange("change");
            if (d) {
                c.options.columnsPanel._activeColumn = null;
                c.element.ColumnRow_AGGRFUNC("setActiveColumn")
            }
        },
        _createFunctionMenu: function() {
            var l = this;
            var f = [];
            var c = l.getModel().getAggrFunctions();
            var d = true;
            var h = true;
            var k = null;
            var e = l._getAttribute();
            var g;
            var j = c.length;
            for (var i = 0; i < j; i++) {
                if (!c[i]) {
                    continue
                }
                d = true;
                if (c[i].id === "SUM" || c[i].id === "AVG") {
                    d = a.inArray(e.dataType, ["Autoinc", "Byte", "Currency", "Float", "Int", "Int64", "Word"]) >= 0
                } else {
                    if (c[i].id === "MIN" || c[i].id === "MAX") {
                        d = a.inArray(e.dataType, ["Autoinc", "BCD", "Byte", "Currency", "Date", "DateTime", "Float", "Int", "Int64", "Time", "Word"]) >= 0
                    }
                } if (l._column.expr.func === c[i].id && !d) {
                    h = false
                }
                if (d) {
                    g = l.getModel().getAggrFunctionCaption(c[i].id);
                    k = {
                        id: c[i].id,
                        text: g
                    };
                    f.push(k)
                }
            }
            if (!h) {
                l._column.expr.func = f[0].id
            }
            l._menuFunctionsBlock = a("<div></div>").hide().appendTo(l.element);
            l._menuFunctionsBlock.PopupMenu({
                items: f
            });
            return l._menuFunctionsBlock
        },
        _showButtons: function() {
            if (this.options.columnsPanel.options.allowAggrColumns != false) {
                this._columnTypeButton.css("background-image", "")
            } else {
                this._columnTypeButton.attr("title", "")
            }
            this._deleteButton.css("background-image", "");
            if (this.options.columnsPanel.options.allowSorting != false) {
                this._sortingButton.css("background-image", "")
            }
        },
        _setupButtonListeners: function() {
            var c = this;
            if (c._columnTypeButton) {
                c._columnTypeButton.click(function(d) {
                    if (c.options.columnsPanel.options.allowAggrColumns !== false && c._column.enabled !== false) {
                        c._keepShowingButtons = true;
                        c._menuFunctionsBlock.PopupMenu("showMenu", {
                            anchor: c._columnTypeButton,
                            selectedIds: null,
                            itemSelectedCallback: function(e, f) {
                                c._changeTypeToAggr(f.menuItem.id);
                                return false
                            },
                            menuClosedCallback: function() {
                                c._keepShowingButtons = false;
                                if (!c._isMouseOverBlock) {
                                    c._columnTypeButton.trigger("mouseleave")
                                }
                            }
                        })
                    }
                })
            }
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.ColumnRow_AGGRFUNC", a.eqjs.ColumnRow_ENTATTR, {
        _classesToAdd: "eqjs-qc-row eqjs-qc-row-column-aggr",
        _displayFormatParser: {
            formatStr: "",
            pos: 0,
            token: "text",
            tokenText: "",
            start: function(c) {
                this.formatStr = c;
                this.pos = 0;
                this.tokenText = ""
            },
            skipSpaces: function() {
                while (this.pos < this.formatStr.length && this.formatStr.charAt(this.pos) === " ") {
                    this.pos++
                }
            },
            next: function() {
                this.skipSpaces();
                if (this.pos >= this.formatStr.length) {
                    return false
                }
                var e = 0;
                if (this.formatStr.charAt(this.pos) === "{") {
                    e = this.formatStr.indexOf("}", this.pos);
                    if (e < 0) {
                        return false
                    }
                    this.tokenText = this.formatStr.substring(this.pos, e + 1);
                    if (this.tokenText.indexOf("{attr") === 0) {
                        this.token = "attribute"
                    }
                    this.pos = e + 1
                } else {
                    if (this.formatStr.charAt(this.pos) === "[" && this.pos < this.formatStr.length - 1 && this.formatStr.charAt(this.pos + 1) === "[") {
                        this.pos += 2;
                        e = this.formatStr.indexOf("]]", this.pos);
                        this.token = "function";
                        this.tokenText = this.formatStr.substring(this.pos, e);
                        this.pos = e + 2
                    } else {
                        this.token = "text";
                        var d = this.formatStr.indexOf("{", this.pos);
                        if (d < 0) {
                            d = this.formatStr.length
                        }
                        var c = this.formatStr.indexOf("[[", this.pos);
                        if (c < 0) {
                            c = this.formatStr.length
                        }
                        e = Math.min(d, c);
                        this.tokenText = a.trim(this.formatStr.substring(this.pos, e));
                        this.pos = e
                    }
                }
                return true
            }
        },
        _parseDisplayFormat: function(d) {
            if (!d) {
                return []
            }
            var c = [];
            var e = this._displayFormatParser;
            e.start(d);
            while (e.next()) {
                if (e.token === "function") {
                    c.push({
                        type: "function",
                        text: e.tokenText
                    })
                } else {
                    if (e.token === "attribute") {
                        c.push({
                            type: "attribute"
                        })
                    } else {
                        if (e.token === "text") {
                            c.push({
                                type: "text",
                                text: e.tokenText
                            })
                        }
                    }
                }
            }
            return c
        },
        _baseExprMenuClick: function(c, g) {
            var d = this;
            var f = g.menuItem.data("id");
            var e = d.getModel().getAttributeById(f);
            d._column.expr.argument.id = f;
            d._column.caption = "";
            d.refresh();
            d._fireColumnChange("change");
            return false
        },
        _fillBaseBlock: function(e) {
            var n = this;
            e.addClass("eqjs-qc-expr-block eqjs-qc-expr-block-aggr");
            var g, d;
            var l = a("<div></div>").addClass("eqjs-qc-colelement eqjs-qc-aggrfuncelement");
            if (n._column.enabled !== false && !n._column.readOnly) {
                d = a("<a></a>", {
                    href: "javascript:void(0)"
                }).appendTo(l);
                n._createFunctionMenu()
            } else {
                d = a("<span></span>").appendTo(l)
            }
            var i = n.getModel().getAggrFunctionFormat(n._column.expr.func);
            if (!i || i === "") {
                return
            }
            var c = n._parseDisplayFormat(i);
            if (c.length === 0) {
                return
            }
            var m = null;
            var f = c.length;
            for (var h = 0; h < f; h++) {
                m = c[h];
                if (m.type === "function") {
                    d.text(m.text);
                    l.appendTo(e);
                    if (n._column.enabled !== false) {
                        d.click(function(o) {
                            n._menuFunctionsBlock.PopupMenu("showMenu", {
                                anchor: d,
                                selectedIds: null,
                                itemSelectedCallback: function(q, r) {
                                    n._column.expr.func = r.menuItem.id;
                                    n._column.caption = "";
                                    n.refresh();
                                    n._fireColumnChange("change");
                                    return false
                                }
                            })
                        })
                    }
                } else {
                    if (m.type === "attribute") {
                        n._baseAttr = n._getAttribute();
                        g = this._getBaseExpr();
                        var k = a("<div></div>").addClass("eqjs-qc-colelement eqjs-qc-attrelement").appendTo(e);
                        g.appendTo(k)
                    } else {
                        if (m.type === "text") {
                            var j = a("<span></span>").addClass("eqjs-qc-colelement").text(m.text).appendTo(e)
                        }
                    }
                }
            }
        },
        _getDefaultCaption: function() {
            return this._getAttributeText(this._baseAttr) + " " + this.getModel().getAggrFunctionCaption(this._column.expr.func)
        },
        _getAttribute: function() {
            return this.getModel().getAttributeById(this._column.expr.argument.id)
        },
        _setupButtonListeners: function() {
            var c = this;
            c._columnTypeButton.click(function() {
                if (c._column.enabled !== false) {
                    c._changeTypeToSimple();
                    return false
                }
            })
        },
        _adjustButtonsVisibility: function() {
            var c = this;
            c._columnTypeButton.addClass("aggregated").attr("title", EQ.core.getText("ButtonToSimple"));
            if (this.options.columnsPanel.options.alwaysShowButtons || (this.options.columnsPanel.options.accentActiveColumn && this._active)) {
                this._showButtons()
            }
        },
        _changeTypeToSimple: function() {
            var c = this;
            var f = c._column.expr.argument.id;
            c._column.caption = "";
            c._column.expr = {
                typeName: "ENTATTR",
                id: f
            };
            var e = c._column;
            var d = c._active;
            c.destroy();
            c._clear();
            c.element.ColumnRow_ENTATTR({
                columnsPanel: c.options.columnsPanel
            });
            c.element.ColumnRow_ENTATTR("init", e);
            c._fireColumnChange("change");
            if (d) {
                c.options.columnsPanel._activeColumn = null;
                c.element.ColumnRow_ENTATTR("setActiveColumn")
            }
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.ColumnRow_CaptionEditor", a.eqjs.ValueEditor_EDIT, {
        _column: null,
        _defaultValue: "",
        _editBoxClass: "eqjs-qc-ce-editbox",
        _onChange: null,
        init: function(e, c, d) {
            this._expr.value = e.caption;
            this._expr.text = e.caption;
            this._column = e;
            this._defaultValue = c;
            this._onChange = d;
            this.refresh()
        },
        _render: function() {
            this.clear();
            if (this._column) {
                this._renderCommonPart();
                this._renderEditor();
                this._linkElement.text(this._getDisplayText())
            }
        },
        _renderCommonPart: function() {
            var c = this;
            c.element.addClass(c._getClassesToAdd());
            c._linkElement = a("<a></a>", {
                href: "javascript:void(0)",
                text: "-"
            }).appendTo(c.element);
            c._linkElement.click(function() {
                c._showEditor();
                return false
            })
        },
        _getClassesToAdd: function() {
            return "eqjs-qc-colelement eqjs-qc-captionelement"
        },
        _setValue: function(c) {
            if (!c || c == "") {
                this._column.caption = this._defaultValue
            } else {
                this._column.caption = c
            }
            this._linkElement.text(this._column.caption);
            if (this._onChange) {
                this._onChange(c)
            }
        },
        _getValue: function() {
            return this._column.caption
        },
        _getText: function() {
            return this._column.caption
        },
        _getDisplayText: function() {
            return this._column.caption
        },
        _getZIndex: function() {
            return 100000
        }
    })
})(jQuery);
(function(a, b) {
    a.widget("eqjs.EntitiesPanel", {
        _rootEntityBlock: null,
        _model: null,
        options: {
            queryPanelId: "QueryPanel",
            columnsPanelId: "ColumnsPanel",
            showToolbar: true,
            showAddColumnButton: true,
            showAddConditionButton: true,
            showCheckboxes: true,
            clickableAttributes: 0,
            draggableAttributes: true,
            showAttributes: {
                usedInConditions: true,
                usedInColumns: true,
                usedInSorting: false
            }
        },
        getSelf: function() {
            return this
        },
        getModel: function() {
            return this._model
        },
        setModel: function(c) {
            this._model = c;
            this._render()
        },
        _create: function() {
            var c = this
        },
        _render: function() {
            var d = this,
                c;
            this._clear();
            var e = this.getModel();
            if (e != null && !e.isEmpty()) {
                this._rootEntityBlock = a("<div></div>");
                c = this.element.append(this._renderEntity(e.getRootEntity(), this._rootEntityBlock, 0))
            }
            if (this.options.showToolbar) {
                this._createToolPanel(c)
            }
        },
        _renderEntity: function(q, n, m) {
            var s = this;
            var r = "eqjs-ep-entity",
                k, g = a("<div></div>", {
                    "class": r + "-node"
                }),
                t = a("<div></div>", {
                    "class": r + "-children"
                }),
                z = a("<label></label>", {
                    "class": r + "-node-label"
                }),
                C = a("<input />", {
                    type: "checkbox"
                }),
                e = a("<a></a>", {
                    href: "javascript:void(0)",
                    "class": r + "-node-button"
                }),
                o, l, w, y, u, x, h = a("<div></div>"),
                A = m;
            var c = function(D, i) {
                var j = i.find("." + r + '-attr[data-id="' + D + '"]');
                return j.length > 0
            };
            var d = function(i) {
                return (s.options.showAttributes.usedInConditions && i.UIC) || (s.options.showAttributes.usedInColumns && i.UIR) || (s.options.showAttributes.usedInSorting && i.UIS)
            };
            if (n) {
                k = n;
                k.html("").addClass(r)
            } else {
                k = a("<div></div>", {
                    "class": r
                })
            } if (q.name && q.name != "") {
                x = EQ.core.getText("Entities", q.name);
                if (!x) {
                    x = q.caption
                }
                z.text(x).appendTo(g);
                if (s.options.showCheckboxes) {
                    z.prepend(C)
                }
                e.prependTo(g);
                for (var w = 0; w < A; w++) {
                    g.prepend(a("<div></div>", {
                        "class": r + "-offset"
                    }))
                }
                k.append(g);
                t.hide();
                A++
            } else {} if (q.subEntities) {
                var B = q.subEntities.length;
                for (var w = 0; w < B; w++) {
                    y = q.subEntities[w];
                    if (d(y)) {
                        t.append(s._renderEntity(y, null, A))
                    }
                }
            }
            e.click(function() {
                t.toggle();
                a(this).toggleClass(r + "-node-button-open")
            });
            if (q.attributes) {
                var f = q.attributes.length;
                for (var w = 0; w < f; w++) {
                    u = q.attributes[w];
                    if (d(u)) {
                        if (!u.lookupAttr || !(c(u.lookupAttr, t) || c(u.lookupAttr, this._rootEntityBlock))) {
                            x = EQ.core.getText("Attributes", u.id);
                            if (!x) {
                                x = u.caption
                            }
                            l = a("<label></label>", {
                                text: x,
                                "class": r + "-attr-label"
                            });
                            if (s.options.showCheckboxes) {
                                l.prepend('<input type="checkbox" />')
                            }
                            for (var v = 0; v < A + 1; v++) {
                                l.prepend(a("<div></div>", {
                                    "class": r + "-offset"
                                }))
                            }
                            o = a("<div></div>").attr("class", function() {
                                var i = r + "-attr ";
                                if (g.html().length == 0) {
                                    i += r + "-attr-root"
                                }
                                return i
                            }).html(l).attr("data-id", u.id);
                            if (s.options.draggableAttributes) {
                                o.draggable({
                                    containment: "document",
                                    cursor: "move",
                                    helper: "clone",
                                    revert: "invalid",
                                    scope: "entityAttr",
                                    distance: 20,
                                    connectToSortable: ".ui-sortable",
                                    cursorAt: {
                                        bottom: 20,
                                        left: 10
                                    },
                                    start: function(i, j) {
                                        j.helper.find("input").hide()
                                    }
                                })
                            }
                            if (s.options.clickableAttributes == 1) {
                                o.click(function() {
                                    var i = a("#" + s.options.queryPanelId);
                                    i.QueryPanel("addNewConditionIntoActivePredicate", a(this).data("id"))
                                })
                            }
                            t.append(o)
                        }
                    }
                }
            }
            if (t.html().length) {
                k.append(t)
            }
            if (t) {
                t.find("label input").click(function(i) {
                    if (a(this).prop("checked") && !(C.prop("checked"))) {
                        C.prop("checked", true)
                    } else {
                        if (t.find("input:checked").length == 0) {
                            C.prop("checked", false)
                        }
                    }
                })
            }
            C.click(function() {
                if (a(this).prop("checked")) {
                    t.find("label input").prop("checked", true)
                } else {
                    t.find("label input").prop("checked", false)
                }
            });
            return k
        },
        _createToolPanel: function(d) {
            var l = this;
            var f = "eqjs-ep-tool-panel",
                m = a("<div></div>", {
                    "class": f
                }),
                g = a("<div></div>", {
                    "class": f + "-select-all",
                    title: "Select all"
                }),
                c = a("<div></div>", {
                    "class": f + "-deselect-all",
                    title: "Clear selection"
                }),
                k = a("<div></div>", {
                    "class": f + "-add-columns",
                    title: "Add column"
                }),
                e = a("<div></div>", {
                    "class": f + "-add-cond",
                    title: "Add condition"
                }),
                j = a("<div></div>", {
                    "class": f + "-left-side"
                }),
                i = a("<div></div>", {
                    "class": f + "-right-side"
                });
            var h = l.getModel();
            j.append(c);
            i.append(k, e);
            m.append(j, i);
            g.click(function() {
                d.find("input").prop("checked", true)
            });
            c.click(function() {
                d.find("input").prop("checked", false)
            });
            k.click(function() {
                var n = a("#" + l.options.columnsPanelId);
                var s = l.element.find(".eqjs-ep-entity-attr");
                var r = [];
                var q, o;
                a.each(s, function(u, v) {
                    v = a(v);
                    var t = v.find("input").first();
                    if (t.prop("checked")) {
                        q = v.data("id");
                        if (h.checkAttrProperty(q, "UIR")) {
                            r.push(q)
                        }
                    }
                });
                n.ColumnsPanel("addNewColumn", r)
            });
            e.click(function() {
                var n = a("#" + l.options.queryPanelId);
                var s = l.element.find(".eqjs-ep-entity-attr");
                var r = [];
                var q, o;
                a.each(s, function(u, v) {
                    v = a(v);
                    var t = v.find("input").first();
                    if (t.prop("checked")) {
                        q = v.data("id");
                        if (h.checkAttrProperty(q, "UIC")) {
                            r.push(q)
                        }
                    }
                });
                n.QueryPanel("addNewCondition", r)
            });
            this.element.append(m)
        },
        _setOption: function(c, d) {
            if (arguments.length == 2) {
                this.options[c] = d;
                this._render();
                return this
            } else {
                return this.options[c]
            }
        },
        _clear: function() {
            this.element.html("")
        },
        refresh: function() {
            this._render()
        },
        resize: function() {
            this._render()
        }
    })
})(jQuery);
(function(d, g) {
    var f = function(j, i, l) {
        if (i === l) {
            return
        }
        var k = j[i];
        j[i] = j[l];
        j[l] = k;
        delete k
    };
    d.widget("eqjs.ColumnsBar", {
        _query: null,
        _activeColumn: null,
        _activeColumnIndex: null,
        _contentBlockClass: "eqjs-cb-inner-wrapper",
        _colsBlockClass: "eqjs-cb-inner",
        _width: 0,
        _leftBtn: null,
        _rightBtn: null,
        _uiUpdaterId: null,
        options: {
            showAddButton: true,
            addButtonSide: "left",
            addButtonHTML: "+",
            innerPaddingCompensation: {
                right: 38,
                left: 35
            },
            allowAggrColumns: true,
            allowSorting: true,
            sortByList: ["None", "Ascending", "Descending"],
            placeholderHeight: 22,
            adjustEntitiesMenuHeight: true,
            attrElementFormat: "{entity} {attr}",
            alwaysShowButtons: false,
            accentActiveColumn: true,
            uiUpdateInterval: 200,
            scrollSpeed: 15,
            showScrollBar: true,
            scrollButtonsScrollBy: 500,
            scrollButtonsLeftHTML: "&lt; ...",
            scrollButtonsRightHTML: "... &gt;"
        },
        _setOption: function(i, j) {
            if (arguments.length == 2) {
                this.options[i] = j;
                this._render();
                return this
            } else {
                return this.options[i]
            }
        },
        _create: function() {
            this._render()
        },
        _clear: function() {
            this.element.html("")
        },
        getModel: function() {
            var i = this.queryQuery();
            return i ? i.getModel() : null
        },
        getQuery: function() {
            return this._query
        },
        setQuery: function(i) {
            this._query = i;
            this.refresh()
        },
        init: function(i) {
            this.setQuery(i)
        },
        refresh: function() {
            this._render()
        },
        resize: function() {
            this._render()
        },
        _render: function() {
            this._clear();
            if (!this.getModel()) {
                return
            }
            this.options.entitiesList = getModel().getEntitiesTree({
                addUIC: false,
                addUIR: true,
                addUIS: false
            });
            this.options.entitiesMenu = this._createEntitiesMenu();
            this._refreshByQuery();
            var i = "eqjs-cb-with-add-button-on-";
            this.element.removeClass(i + "left").removeClass(i + "right");
            if (this.options.showAddButton) {
                this.element.addClass(i + this.options.addButtonSide);
                this._showAddButton()
            }
        },
        _refreshByQuery: function() {
            if (!this.getQuery()) {
                return
            }
            var u = this;
            var t = d("<div></div>").addClass(u._colsBlockClass),
                j = d("<div></div>").addClass(u._contentBlockClass);
            var r = u.getQuery();
            var k = r ? r.getColumns() : null,
                i = function(x, z, v) {
                    var y = k[colIdx];
                    var w = z["ColumnsBarColumn_" + y.expr.typeName];
                    w.call(z, {
                        columnsBar: x,
                        query: x.getQuery()
                    });
                    w.call(z, "init", y);
                    return {
                        wfn: w,
                        element: z
                    }
                };
            var l = (typeof u._activeColumnIndex) === "number";
            for (colIdx in k) {
                var q = i(u, d("<div></div>").appendTo(t), colIdx);
                if (l && +colIdx === u._activeColumnIndex) {
                    q.wfn.call(q.element, "setActiveColumn");
                    q.element.click()
                }
            }
            var o = t.children("div");
            t.appendTo(j);
            j.appendTo(u.element);
            if (!u.options.showScrollBar) {
                j.css("overflow-x", "hidden");
                u._leftBtn = u._makeScrollButton({
                    html: u.options.scrollButtonsLeftHTML,
                    t: "left",
                    otherT: "right",
                    scrollLeft: "-=" + u.options.scrollButtonsScrollBy
                });
                u._rightBtn = u._makeScrollButton({
                    html: u.options.scrollButtonsRightHTML,
                    t: "right",
                    otherT: "left",
                    scrollLeft: "+=" + u.options.scrollButtonsScrollBy
                });
                u.element.prepend(u._leftBtn.hide());
                u.element.prepend(u._rightBtn.hide())
            } else {
                j.css("overflow-x", "auto");
                u._leftBtn = null;
                u._rightBtn = null
            } if (u._uiUpdaterId) {
                clearInterval(u._uiUpdaterId)
            }
            u._uiUpdaterId = window.setInterval(function() {
                var v = 2;
                var w = v;
                o.each(function() {
                    w += d(this).outerWidth(true)
                });
                if (w > v && w !== u._width) {
                    u._width = w;
                    u.element.find("." + u._colsBlockClass).css({
                        width: w
                    })
                }
                if (u._leftBtn && u._rightBtn) {
                    u._updateScrollButtonVisibility(u._leftBtn, "left");
                    u._updateScrollButtonVisibility(u._rightBtn, "right")
                }
            }, u.options.uiUpdateInterval);
            var n, s, m = false;
            t.sortable({
                cursor: "move",
                tolerance: "pointer",
                cancel: ".eqjs-cb-column-buttonsBlock, .eqjs-cb-colelement, .eqjs-cb-sortbutton, .eqjs-ce-editbox",
                placeholder: "eqjs-cb-column-placeholder",
                forcePlaceholderSize: true,
                scroll: true,
                scrollSpeed: this.options.scrollSpeed,
                delay: 100,
                distance: 13,
                forceHelperSize: true,
                start: function(v, w) {
                    n = w.item.index();
                    w.item.addClass("eqjs-cb-column-sort");
                    w.placeholder.height(u.options.placeholderHeight)
                },
                update: function(v, w) {
                    s = w.item.index();
                    if (m) {
                        m = false;
                        k.splice(s, 0, k.pop());
                        u.refresh()
                    } else {
                        f(k, n, s)
                    }
                },
                stop: function(v, w) {
                    w.item.removeClass("eqjs-cb-column-sort");
                    w.item.click();
                    u._fireQueryChange("change")
                }
            });
            u.element.droppable({
                tolerance: "touch",
                hoverClass: "eqjs-drophover",
                scope: "entityAttr",
                drop: function(v, w) {
                    u.addNewColumn(w.draggable.attr("data-id"));
                    m = true
                },
                over: function(v, w) {
                    w.helper.addClass("eqjs-cb-column-drag")
                },
                out: function(v, w) {
                    w.helper.removeClass("eqjs-cb-column-drag")
                }
            });
            (!t.children().length) ? j.hide() : j.show()
        },
        _makeScrollButton: function(n) {
            var i = this,
                l = n.t,
                j = n.otherT;
            var m = function(o) {
                return "eqjs-cb-button-" + o
            };
            var k = d("<span></span>").addClass(m(l)).html(n.html);
            k.click(function() {
                d(this).parent().find("." + i._contentBlockClass).animate({
                    scrollLeft: n.scrollLeft
                })
            });
            return k
        },
        _updateScrollButtonVisibility: function(l, k) {
            var j = l.parent().find("." + this._contentBlockClass);
            var o = j.scrollLeft(),
                n = j.innerWidth(),
                i = this._width;
            if (this.options.showAddButton) {
                i += this.options.innerPaddingCompensation[this.options.addButtonSide]
            }
            if ((n >= i) || !n || o === null) {
                return l.hide()
            }
            var m = {
                left: function() {
                    return o
                },
                right: function() {
                    return i - (n + o)
                }
            }[k]();
            (m <= 0) ? l.hide() : l.show()
        },
        _showAddButton: function() {
            var k = this.options.addButtonSide;
            var l = d('<div class="eqjs-cb-add-button"></div>');
            l.prependTo(this.element).css(k, this.element.css("padding-" + k));
            var i = d('<a href="javascript:void(0)"></a>').html(this.options.addButtonHTML).appendTo(l);
            var j = this;
            i.click(function() {
                j.showEntitiesMenu({
                    anchor: i,
                    selectedIds: null,
                    itemSelectedCallback: function(m, q) {
                        var o = q.menuItem.id;
                        var n = getModel().getAttributeById(o);
                        j.addNewColumn(o);
                        return false
                    }
                })
            })
        },
        showEntitiesMenu: function(k, j) {
            var i = this;
            i.options.entitiesMenu.PopupMenu("showMenu", k)
        },
        clearColumns: function(i) {
            this.getQuery().clearColumns();
            if (i !== false) {
                this.refresh()
            }
        },
        _createEntitiesMenu: function() {
            if (!this.getModel()) {
                return null
            }
            var i = d("<div></div>").hide().appendTo(this.element);
            i.PopupMenu({
                items: this.options.entitiesList,
                adjustHeight: this.options.adjustEntitiesMenuHeight
            });
            return i
        },
        _fireQueryChange: function(i) {
            var j = this;
            this.getQuery().fireChangedEvent({
                changeType: "query." + i
            })
        },
        _fireColumnChange: function(i, k) {
            var j = this;
            k = k || j._column;
            this.getQuery().fireChangedEvent({
                changeType: "column." + i,
                column: k
            })
        },
        addNewColumn: function(o, l) {
            var j = this;
            var q = function(i) {
                var r = j.getModel().getAttributeById(i);
                if (!r) {
                    return null
                }
                if (!r.UIR) {
                    if (r.lookupAttr) {
                        i = r.lookupAttr;
                        r = j.getModel().getAttributeById(i);
                        if (!r || !r.UIR) {
                            return null
                        }
                    } else {
                        return null
                    }
                }
                return {
                    caption: "",
                    sorting: "None",
                    sortIndex: -1,
                    expr: {
                        typeName: "ENTATTR",
                        id: i
                    }
                }
            };
            if (!j.getQuery()) {
                return
            }
            var n, k;
            if (d.isArray(o)) {
                n = [];
                for (var m = 0; m < o.length; m++) {
                    k = q(o[m]);
                    if (k) {
                        n.push(k)
                    }
                }
            } else {
                n = q(o)
            }
            j.addColumn(n, l);
            return n
        },
        addColumn: function(l, j) {
            var i = this;
            var m = this.getQuery();
            if (!m) {
                return
            }
            var k = m.getColumns();
            if (!l || (d.isArray(l) && l.length == 0)) {
                return
            }
            if (typeof j == "number") {
                k.splice.apply(k, [j, 0].concat(l))
            } else {
                k.push.apply(k, [].concat(l))
            }
            i._width += (i._initialWidth * 4);
            i.refresh();
            i._fireColumnChange("add", l)
        },
        removeColumn: function(l) {
            var i = this;
            var m = this.getQuery();
            if (!m) {
                return
            }
            var k = m.getColumns();
            var j = d.inArray(l, k);
            if (j >= 0) {
                if (j === i._activeColumnIndex) {
                    i._activeColumnIndex = null
                }
                k.splice(j, 1);
                i.refresh();
                i._fireColumnChange("remove", l)
            }
        },
        removeColumnByAttrId: function(o) {
            var i = this;
            var n = this.getQuery();
            if (!n) {
                return
            }
            var l = n.getColumns();
            var k = 0;
            var m = l.length;
            while (k < m) {
                var j = l[k];
                if (j.expr.typeName == "ENTATTR" && j.expr.id == o) {
                    break
                }
                k++
            }
            if (k < m) {
                l.splice(k, 1);
                i._fireColumnChange("remove", j);
                i.refresh()
            }
        },
        setActiveColumn: function(i) {
            if (this._activeColumn) {
                this._activeColumn.deactivate()
            }
            this._activeColumn = i;
            if (this._activeColumn) {
                this._activeColumn.activate()
            }
        },
        getActiveColumn: function() {
            return this._activeColumn
        },
        setActiveColumnIndex: function(i) {
            this._activeColumnIndex = i
        }
    });
    var h = function(k, j, n) {
        var l = k.self.options.columnsBar._query.getColumns();
        if (!l.length) {
            return
        }
        f(l, j, n);
        var m = k.self.options.columnsBar.getActiveColumn();
        if (m && m._active && m.element.length) {
            var i = m.element.index();
            if (i === j) {
                return n
            } else {
                if (i === n) {
                    return j
                }
            }
        }
    };
    var c = function(k, j) {
        var i = j.parent().parent().parent();
        if ((typeof k) !== "undefined") {
            i.ColumnsBar("setActiveColumnIndex", k)
        }
        i.ColumnsBar("refresh")
    };
    var a = [{
        id: "|<-",
        text: EQ.core.getText("CmdMoveToStart"),
        fn: function(i) {
            c(h(i, 0, i.self.element.index()), i.self.element)
        }
    }, {
        id: "->",
        text: EQ.core.getText("CmdMoveRight"),
        fn: function(j) {
            var k = j.self.element;
            var i = k.next();
            if (!i.length) {
                return
            }
            c(h(j, i.index(), k.index()), k)
        }
    }, {
        id: "<-",
        text: EQ.core.getText("CmdMoveLeft"),
        fn: function(i) {
            var k = i.self.element;
            var j = k.prev();
            if (!j.length) {
                return
            }
            c(h(i, j.index(), k.index()), k)
        }
    }, {
        id: "->|",
        text: EQ.core.getText("CmdMoveToEnd"),
        fn: function(i) {
            var k = i.self.element;
            var j = k.parent().children().last();
            if (!j.length) {
                return
            }
            c(h(i, j.index(), k.index()), k)
        }
    }];
    var b = function(i, j) {
        var k = i.indexOf(j) + 1;
        return (k == i.length) ? i[0] : i[k]
    };
    d.widget("eqjs.ColumnsBarColumn", {
        _column: null,
        _sortingButton: null,
        _buttonsBlock: null,
        _menuButton: null,
        _menuButtonMenu: null,
        _deleteButton: null,
        _keepShowingButtons: false,
        _isMouseOverBlock: false,
        _classesToAdd: "",
        _active: false,
        options: {
            columnsBar: null,
            query: null
        },
        getQuery: function() {
            return this.options.query
        },
        getModel: function() {
            var i = this.getQuery();
            return i ? i.getModel() : null
        },
        init: function(i) {
            this._column = i;
            this.refresh()
        },
        _render: function() {
            this._clear();
            if (this.getModel() && this._column) {
                this._refreshByColumn();
                this._initButtons()
            }
        },
        _fireColumnChange: function(i, k) {
            var j = this;
            k = k || j._column;
            var l = this.qetQuery();
            if (!l) {
                return
            }
            l.fire({
                query: j.options.columnsBar.options.query,
                changeType: "column." + i,
                condition: k
            })
        },
        refresh: function() {
            this._render()
        },
        _setOption: function(i, j) {
            if (arguments.length == 2) {
                this.options[i] = j;
                if (i === "disabled") {
                    this._column.enabled = !j
                }
                this._render();
                return this
            } else {
                if (i === "disabled") {
                    return this._column.enabled === false
                } else {
                    return this.options[i]
                }
            }
        },
        _clear: function() {
            this.element.unbind();
            this.element.html("");
            this.element.removeClass()
        },
        _refreshByColumn: function() {},
        remove: function() {
            var i = this;
            if (!i.options.columnsBar) {
                return
            }
            i.options.columnsBar.removeColumn(i._column);
            i._fireColumnChange("delete")
        },
        destroy: function() {
            d.Widget.prototype.destroy.call(this)
        },
        _initMenu: function() {
            var j = this._getMenuButtonMenuItems();
            var k = function(n, t, l) {
                for (var m = 0, q = n.length; m < q; m++) {
                    var s = n[m];
                    if (s.items) {
                        var o = k(s.items, t, l);
                        if (o) {
                            return true
                        }
                    } else {
                        if (t == s.id) {
                            if (s.fn) {
                                s.fn(l)
                            }
                            return true
                        }
                    }
                }
                return false
            };
            this._menuButtonMenu = d("<div></div>").hide().appendTo(this.element);
            this._menuButtonMenu.PopupMenu({
                items: j
            });
            var i = this;
            i._menuButton.click(function() {
                i._menuButtonMenu.PopupMenu("showMenu", {
                    anchor: i._menuButton,
                    selectedIds: null,
                    itemSelectedCallback: function(l, m) {
                        k(j, m.menuItem.id, {
                            self: i,
                            evt: l,
                            data: m
                        });
                        return false
                    },
                    menuClosedCallback: function() {
                        if (!i._isMouseOverBlock) {
                            i._menuButtonMenu.trigger("mouseleave")
                        }
                    }
                })
            })
        },
        _initButtons: function() {
            var j = this;
            var i = j.element;
            if (!i) {
                return
            }
            j._buttonsBlock = d("<span></span>").addClass("eqjs-cb-column-buttonsBlock").appendTo(i);
            j._menuButton = d("<span></span>").addClass("eqjs-cb-column-button-menu").attr("title", EQ.core.getText("ButtonMenu")).appendTo(j._buttonsBlock);
            j._initMenu();
            j._deleteButton = d("<span></span>").addClass("eqjs-cb-column-button-delete").attr("title", EQ.core.getText("ButtonDelete")).appendTo(j._buttonsBlock).click(function() {
                j.remove()
            });
            j._sortingButton = d("<span></span>").addClass("eqjs-colelement eqjs-cb-button-sort").prependTo(j.element);
            if (j.options.columnsBar.options.allowSorting != false) {
                j._sortingButton.attr("title", EQ.core.getText("ButtonSorting")).click(function() {
                    j._column.sorting = b(j.options.columnsBar.options.sortByList, j._column.sorting);
                    j.refresh();
                    j._fireColumnChange("change")
                });
                if (j._column.sorting === "None") {
                    j._sortingButton.addClass("eqjs-cb-column-button-sort-none")
                }
                j._sortingButton.hover(function() {
                    d(this).addClass("eqjs-cb-column-button-sort-active")
                }, function() {
                    d(this).removeClass("eqjs-cb-column-button-sort-active")
                })
            }
            if (j._column.sorting === "Ascending") {
                j._sortingButton.addClass("eqjs-cb-column-button-sort-asc").attr("title", EQ.core.getText("ButtonSorting"))
            } else {
                if (j._column.sorting === "Descending") {
                    j._sortingButton.addClass("eqjs-cb-column-button-sort-desc").attr("title", EQ.core.getText("ButtonSorting"))
                }
            }
            i.find("[class*=eqjs-column-button]").hover(function() {
                d(this).addClass("eqjs-cb-column-button-sort-active")
            }, function() {
                d(this).removeClass("eqjs-cb-column-button-sort-active")
            });
            i.bind("mouseenter", function(k) {
                j._isMouseOverBlock = true;
                j._enterButtonBlock();
                k.stopPropagation();
                return false
            }).bind("mouseleave", function(k) {
                j._isMouseOverBlock = false;
                if (!j._keepShowingButtons) {
                    j._leaveButtonBlock()
                }
                k.stopPropagation();
                return false
            });
            j._hideButtons();
            j._adjustButtonsVisibility()
        },
        _adjustButtonsVisibility: function() {
            if (this.options.columnsBar.options.alwaysShowButtons || (this.options.columnsBar.options.accentActiveColumn && this._active)) {
                this._showButtons()
            }
        },
        _enterButtonBlock: function() {
            this._showButtons()
        },
        _leaveButtonBlock: function() {
            if (this.options.columnsBar.options.alwaysShowButtons != true && (!this._active || this.options.columnsBar.options.accentActiveColumn != true)) {
                this._hideButtons()
            }
        },
        _showButtons: function() {
            var i = function(j) {
                j.css("visibility", "visible")
            };
            i(this._deleteButton);
            i(this._menuButton);
            if (this.options.columnsBar.options.allowSorting != false) {
                i(this._sortingButton)
            }
        },
        _hideButtons: function() {
            var i = function(j) {
                j.css("visibility", "hidden")
            };
            i(this._deleteButton);
            i(this._menuButton);
            if (this._column.sorting === "None") {
                i(this._sortingButton)
            }
        },
        activate: function() {
            this._active = true;
            this.adjustActiveClass();
            this._hideButtons();
            this._adjustButtonsVisibility()
        },
        deactivate: function() {
            this._active = false;
            this.adjustActiveClass();
            this._hideButtons();
            this._adjustButtonsVisibility()
        },
        adjustActiveClass: function() {
            if (this._active) {
                this.element.addClass("active")
            } else {
                this.element.removeClass("active")
            }
        },
        isActive: function() {
            return this._active
        },
        setActiveColumn: function() {
            this.options.columnsBar.setActiveColumn(this)
        }
    });
    var e = function(i) {
        return [{
            id: "sep",
            text: "-------"
        }].concat(i)
    };
    d.widget("eqjs.ColumnsBarColumn_ENTATTR", d.eqjs.ColumnsBarColumn, {
        _classesToAdd: "eqjs-cb-column eqjs-cb-column-entattr",
        _baseAttr: null,
        _menuFunctionsBlock: null,
        _getMenuButtonMenuItems: function() {
            if (!this.options.columnsBar.options.allowAggrColumns) {
                return a
            }
            var i = this._createFunctionMenuItems(function(k) {
                k.self._changeTypeToAggr(k.data.menuItem.id)
            }),
                j = a;
            if (i) {
                j = e(j)
            }
            return i.concat(j)
        },
        _fillBaseBlock: function(i) {
            i.addClass("eqjs-expr-block");
            this._baseAttr = this._getAttribute();
            if (!this._column.caption) {
                this._column.caption = this._getDefaultCaption()
            }
        },
        _refreshByColumn: function() {
            if (!this._column || !this.getModel()) {
                return
            }
            var i = this;
            i.element.addClass(i._classesToAdd);
            var k = d("<span></span>").appendTo(i.element);
            i._fillBaseBlock(k);
            if (i.options.columnsBar.options.accentActiveColumn) {
                i.element.click(function() {
                    if (!i._active) {
                        i.setActiveColumn()
                    }
                })
            }
            if (!i._column.caption || i._column.caption == "") {
                i._column.caption = i._getDefaultCaption()
            }
            var j = d("<span></span>");
            j.appendTo(this.element);
            var l = function() {
                i._fireColumnChange("change")
            };
            j.ColumnsBarColumn_CaptionEditor();
            j.ColumnsBarColumn_CaptionEditor("init", i._column, i._getDefaultCaption(), l);
            i.adjustActiveClass()
        },
        _getDefaultCaption: function() {
            return this._getAttributeText(this._baseAttr)
        },
        _getAttribute: function() {
            return this.getModel().getAttributeById(this._column.expr.id)
        },
        _getAttributeText: function(k) {
            var j = this;
            if (!k) {
                return ""
            }
            var n = EQ.core.getText("Attributes", k.id);
            if (!n) {
                n = k.caption
            }
            if (!j.options.columnsBar) {
                return n
            }
            var l = j.options.columnsBar.options.attrElementFormat;
            if (!l) {
                return n
            }
            var i = l.replace(new RegExp("{attr}", "g"), n);
            var m = j.getModel().getFullEntityPathByAttr(k.id, ".");
            i = i.replace(new RegExp("{entity}", "g"), m);
            return i
        },
        _changeTypeToAggr: function(l) {
            var i = this;
            if (!l) {
                l = i._menuFunctionsBlock.PopupMenu("option", "items")[0].id
            }
            var m = i._column.expr.id;
            i._column.expr = {
                func: l,
                distinct: false,
                typeName: "AGGRFUNC",
                argument: {
                    typeName: "ENTATTR",
                    id: m
                }
            };
            var k = i._column;
            var j = i._active;
            i.destroy();
            i._clear();
            i.element.ColumnsBarColumn_AGGRFUNC({
                columnsBar: i.options.columnsBar,
                model: i.getModel()
            });
            i.element.ColumnsBarColumn_AGGRFUNC("init", k);
            i._fireColumnChange("change");
            if (j) {
                i.options.columnsBar._activeColumn = null;
                i.element.ColumnsBarColumn_AGGRFUNC("setActiveColumn")
            }
        },
        _createFunctionMenuItems: function(n) {
            var s = this;
            var m = [];
            var k = s.getModel().aggrFunctions;
            var i = true;
            var o = true;
            var r = null;
            var j = s._getAttribute();
            var l;
            for (var q in k) {
                if (!k[q]) {
                    continue
                }
                i = true;
                if (k[q].id === "SUM" || k[q].id === "AVG") {
                    i = d.inArray(j.dataType, ["Autoinc", "Byte", "Currency", "Float", "Int", "Int64", "Word"]) >= 0
                } else {
                    if (k[q].id === "MIN" || k[q].id === "MAX") {
                        i = d.inArray(j.dataType, ["Autoinc", "BCD", "Byte", "Currency", "Date", "DateTime", "Float", "Int", "Int64", "Time", "Word"]) >= 0
                    }
                } if (s._column.expr.func === k[q].id && !i) {
                    o = false
                }
                if (i) {
                    l = s.getModel().getAggrFunctionCaption(k[q].id);
                    r = {
                        id: k[q].id,
                        text: l,
                        fn: n
                    };
                    if (s._column.expr.func !== r.id) {
                        m.push(r)
                    }
                }
            }
            if (m && !o) {
                s._column.expr.func = m[0].id
            }
            return m
        }
    });
    d.widget("eqjs.ColumnsBarColumn_AGGRFUNC", d.eqjs.ColumnsBarColumn_ENTATTR, {
        _classesToAdd: "eqjs-cb-column eqjs-cb-column-aggr",
        _getMenuButtonMenuItems: function() {
            return [{
                id: "to-simple",
                text: EQ.core.getText("CmdToSimple"),
                fn: function(i) {
                    i.self._changeTypeToSimple()
                }
            }].concat(this._createFunctionMenuItems(function(i) {
                i.self._changeTypeToSimple();
                i.self._changeTypeToAggr(i.data.menuItem.id);
                i.self.refresh();
                i.self._fireColumnChange("change")
            })).concat(e(a))
        },
        _displayFormatParser: {
            formatStr: "",
            pos: 0,
            token: "text",
            tokenText: "",
            start: function(i) {
                this.formatStr = i;
                this.pos = 0;
                this.tokenText = ""
            },
            skipSpaces: function() {
                while (this.pos < this.formatStr.length && this.formatStr.charAt(this.pos) === " ") {
                    this.pos++
                }
            },
            next: function() {
                this.skipSpaces();
                if (this.pos >= this.formatStr.length) {
                    return false
                }
                var k = 0;
                if (this.formatStr.charAt(this.pos) === "{") {
                    k = this.formatStr.indexOf("}", this.pos);
                    if (k < 0) {
                        return false
                    }
                    this.tokenText = this.formatStr.substring(this.pos, k + 1);
                    if (this.tokenText.indexOf("{attr") === 0) {
                        this.token = "attribute"
                    }
                    this.pos = k + 1
                } else {
                    if (this.formatStr.charAt(this.pos) === "[" && this.pos < this.formatStr.length - 1 && this.formatStr.charAt(this.pos + 1) === "[") {
                        this.pos += 2;
                        k = this.formatStr.indexOf("]]", this.pos);
                        this.token = "function";
                        this.tokenText = this.formatStr.substring(this.pos, k);
                        this.pos = k + 2
                    } else {
                        this.token = "text";
                        var j = this.formatStr.indexOf("{", this.pos);
                        if (j < 0) {
                            j = this.formatStr.length
                        }
                        var i = this.formatStr.indexOf("[[", this.pos);
                        if (i < 0) {
                            i = this.formatStr.length
                        }
                        k = Math.min(j, i);
                        this.tokenText = d.trim(this.formatStr.substring(this.pos, k));
                        this.pos = k
                    }
                }
                return true
            }
        },
        _parseDisplayFormat: function(j) {
            if (!j) {
                return []
            }
            var i = [];
            var k = this._displayFormatParser;
            k.start(j);
            while (k.next()) {
                if (k.token === "function") {
                    i.push({
                        type: "function",
                        text: k.tokenText
                    })
                } else {
                    if (k.token === "attribute") {
                        i.push({
                            type: "attribute"
                        })
                    } else {
                        if (k.token === "text") {
                            i.push({
                                type: "text",
                                text: k.tokenText
                            })
                        }
                    }
                }
            }
            return i
        },
        _fillBaseBlock: function(n) {
            var s = this;
            n.addClass("eqjs-expr-block eqjs-expr-block-aggr");
            var q = s.getModel().getAggrFunctionFormat(s._column.expr.func);
            if (!q || q === "") {
                return
            }
            var k = s._parseDisplayFormat(q);
            if (k.length === 0) {
                return
            }
            var m = [];
            var r, o;
            for (var l = 0, j = k.length; l < j; l++) {
                r = k[l];
                o = r.type;
                if (o === "function" || o === "text") {
                    m.push(r.text)
                } else {
                    if (o === "attribute") {
                        s._baseAttr = s._getAttribute();
                        m.push(s._getAttributeText(s._baseAttr))
                    }
                }
            }
            this._column.caption = m.join(" ")
        },
        _getDefaultCaption: function() {
            return this._getAttributeText(this._baseAttr) + " " + self.getModel().getAggrFunctionCaption(this._column.expr.func)
        },
        _getAttribute: function() {
            return this.getModel().getAttributeById(this._column.expr.argument.id)
        },
        _changeTypeToSimple: function() {
            var i = this;
            var l = i._column.expr.argument.id;
            i._column.caption = "";
            i._column.expr = {
                typeName: "ENTATTR",
                id: l
            };
            var k = i._column;
            var j = i._active;
            i.destroy();
            i._clear();
            i.element.ColumnsBarColumn_ENTATTR({
                columnsBar: i.options.columnsBar,
                model: i.getModel()
            });
            i.element.ColumnsBarColumn_ENTATTR("init", k);
            i._fireColumnChange("change");
            if (j) {
                i.options.columnsBar._activeColumn = null;
                i.element.ColumnsBarColumn_ENTATTR("setActiveColumn")
            }
        }
    });
    d.widget("eqjs.ColumnsBarColumn_CaptionEditor", d.eqjs.ValueEditor_EDIT, {
        _column: null,
        _defaultValue: "",
        _editBoxClass: "eqjs-ce-editbox",
        _onChange: null,
        init: function(k, i, j) {
            this._expr.value = k.caption;
            this._expr.text = k.caption;
            this._column = k;
            this._defaultValue = i;
            this._onChange = j;
            this.refresh()
        },
        _render: function() {
            this.clear();
            if (this._column) {
                this._renderCommonPart();
                this._renderEditor();
                this._linkElement.text(this._getDisplayText())
            }
        },
        _renderCommonPart: function() {
            var i = this;
            i.element.addClass(i._getClassesToAdd());
            i._linkElement = d("<span></span>", {
                text: "-"
            }).appendTo(i.element);
            i._linkElement.dblclick(function() {
                i._showEditor();
                return false
            })
        },
        _getClassesToAdd: function() {
            return "eqjs-colelement eqjs-captionelement"
        },
        _setValue: function(i) {
            if (!i || i == "") {
                this._column.caption = this._defaultValue
            } else {
                this._column.caption = i
            }
            this._linkElement.text(this._column.caption);
            if (this._onChange) {
                this._onChange(i)
            }
        },
        _getValue: function() {
            return this._column.caption
        },
        _getText: function() {
            return this._column.caption
        },
        _getDisplayText: function() {
            return this._column.caption
        },
        _getZIndex: function() {
            return 100000
        }
    })
})(jQuery);
